//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ContentType = {
  'ARTICLE' : 0,
  'LIVEBLOG' : 1,
  'GALLERY' : 2,
  'INTERACTIVE' : 3,
  'PICTURE' : 4,
  'VIDEO' : 5,
  'AUDIO' : 6,
  'CROSSWORD' : 7
};
ttypes.ElementType = {
  'TEXT' : 0,
  'IMAGE' : 1,
  'EMBED' : 2,
  'FORM' : 3,
  'PULLQUOTE' : 4,
  'INTERACTIVE' : 5,
  'COMMENT' : 6,
  'RICH_LINK' : 7,
  'TABLE' : 8,
  'VIDEO' : 9,
  'TWEET' : 10,
  'WITNESS' : 11,
  'CODE' : 12,
  'AUDIO' : 13,
  'MAP' : 14,
  'DOCUMENT' : 15,
  'MEMBERSHIP' : 16,
  'CONTENTATOM' : 17
};
ttypes.AssetType = {
  'IMAGE' : 0,
  'VIDEO' : 1,
  'AUDIO' : 2
};
ttypes.MembershipTier = {
  'MEMBERS_ONLY' : 0,
  'PAID_MEMBERS_ONLY' : 1
};
ttypes.Office = {
  'UK' : 0,
  'US' : 1,
  'AUS' : 2
};
ttypes.AtomType = {
  'quiz' : 0,
  'viewpoints' : 1
};
Identifiers = module.exports.Identifiers = function(args) {
  this.path = null;
  this.pageId = null;
  this.storyBundleId = null;
  this.fingerpostId = null;
  this.shortPath = null;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field path is unset!');
    }
    if (args.pageId !== undefined && args.pageId !== null) {
      this.pageId = args.pageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pageId is unset!');
    }
    if (args.storyBundleId !== undefined && args.storyBundleId !== null) {
      this.storyBundleId = args.storyBundleId;
    }
    if (args.fingerpostId !== undefined && args.fingerpostId !== null) {
      this.fingerpostId = args.fingerpostId;
    }
    if (args.shortPath !== undefined && args.shortPath !== null) {
      this.shortPath = args.shortPath;
    }
  }
};
Identifiers.prototype = {};
Identifiers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.pageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.storyBundleId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fingerpostId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.shortPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Identifiers.prototype.write = function(output) {
  output.writeStructBegin('Identifiers');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.pageId !== null && this.pageId !== undefined) {
    output.writeFieldBegin('pageId', Thrift.Type.I64, 2);
    output.writeI64(this.pageId);
    output.writeFieldEnd();
  }
  if (this.storyBundleId !== null && this.storyBundleId !== undefined) {
    output.writeFieldBegin('storyBundleId', Thrift.Type.STRING, 3);
    output.writeString(this.storyBundleId);
    output.writeFieldEnd();
  }
  if (this.fingerpostId !== null && this.fingerpostId !== undefined) {
    output.writeFieldBegin('fingerpostId', Thrift.Type.STRING, 4);
    output.writeString(this.fingerpostId);
    output.writeFieldEnd();
  }
  if (this.shortPath !== null && this.shortPath !== undefined) {
    output.writeFieldBegin('shortPath', Thrift.Type.STRING, 5);
    output.writeString(this.shortPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

User = module.exports.User = function(args) {
  this.email = null;
  this.firstName = null;
  this.lastName = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field email is unset!');
    }
    if (args.firstName !== undefined && args.firstName !== null) {
      this.firstName = args.firstName;
    }
    if (args.lastName !== undefined && args.lastName !== null) {
      this.lastName = args.lastName;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.firstName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.lastName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.firstName !== null && this.firstName !== undefined) {
    output.writeFieldBegin('firstName', Thrift.Type.STRING, 2);
    output.writeString(this.firstName);
    output.writeFieldEnd();
  }
  if (this.lastName !== null && this.lastName !== undefined) {
    output.writeFieldBegin('lastName', Thrift.Type.STRING, 3);
    output.writeString(this.lastName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChangeRecord = module.exports.ChangeRecord = function(args) {
  this.date = null;
  this.user = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field date is unset!');
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.User(args.user);
    }
  }
};
ChangeRecord.prototype = {};
ChangeRecord.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChangeRecord.prototype.write = function(output) {
  output.writeStructBegin('ChangeRecord');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentChangeDetails = module.exports.ContentChangeDetails = function(args) {
  this.lastModified = null;
  this.created = null;
  this.published = null;
  this.lastMajorRevisionPublished = null;
  this.revision = null;
  if (args) {
    if (args.lastModified !== undefined && args.lastModified !== null) {
      this.lastModified = new ttypes.ChangeRecord(args.lastModified);
    }
    if (args.created !== undefined && args.created !== null) {
      this.created = new ttypes.ChangeRecord(args.created);
    }
    if (args.published !== undefined && args.published !== null) {
      this.published = new ttypes.ChangeRecord(args.published);
    }
    if (args.lastMajorRevisionPublished !== undefined && args.lastMajorRevisionPublished !== null) {
      this.lastMajorRevisionPublished = new ttypes.ChangeRecord(args.lastMajorRevisionPublished);
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
  }
};
ContentChangeDetails.prototype = {};
ContentChangeDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastModified = new ttypes.ChangeRecord();
        this.lastModified.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.created = new ttypes.ChangeRecord();
        this.created.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.published = new ttypes.ChangeRecord();
        this.published.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastMajorRevisionPublished = new ttypes.ChangeRecord();
        this.lastMajorRevisionPublished.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentChangeDetails.prototype.write = function(output) {
  output.writeStructBegin('ContentChangeDetails');
  if (this.lastModified !== null && this.lastModified !== undefined) {
    output.writeFieldBegin('lastModified', Thrift.Type.STRUCT, 1);
    this.lastModified.write(output);
    output.writeFieldEnd();
  }
  if (this.created !== null && this.created !== undefined) {
    output.writeFieldBegin('created', Thrift.Type.STRUCT, 2);
    this.created.write(output);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.STRUCT, 3);
    this.published.write(output);
    output.writeFieldEnd();
  }
  if (this.lastMajorRevisionPublished !== null && this.lastMajorRevisionPublished !== undefined) {
    output.writeFieldBegin('lastMajorRevisionPublished', Thrift.Type.STRUCT, 4);
    this.lastMajorRevisionPublished.write(output);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 5);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Section = module.exports.Section = function(args) {
  this.id = null;
  this.name = null;
  this.pathPrefix = null;
  this.slug = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pathPrefix !== undefined && args.pathPrefix !== null) {
      this.pathPrefix = args.pathPrefix;
    }
    if (args.slug !== undefined && args.slug !== null) {
      this.slug = args.slug;
    }
  }
};
Section.prototype = {};
Section.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pathPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Section.prototype.write = function(output) {
  output.writeStructBegin('Section');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pathPrefix !== null && this.pathPrefix !== undefined) {
    output.writeFieldBegin('pathPrefix', Thrift.Type.STRING, 3);
    output.writeString(this.pathPrefix);
    output.writeFieldEnd();
  }
  if (this.slug !== null && this.slug !== undefined) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 4);
    output.writeString(this.slug);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = module.exports.Tag = function(args) {
  this.id = null;
  this.type = null;
  this.internalName = null;
  this.externalName = null;
  this.slug = null;
  this.section = null;
  this.path = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.internalName !== undefined && args.internalName !== null) {
      this.internalName = args.internalName;
    }
    if (args.externalName !== undefined && args.externalName !== null) {
      this.externalName = args.externalName;
    }
    if (args.slug !== undefined && args.slug !== null) {
      this.slug = args.slug;
    }
    if (args.section !== undefined && args.section !== null) {
      this.section = new ttypes.Section(args.section);
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.internalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.externalName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.section = new ttypes.Section();
        this.section.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.internalName !== null && this.internalName !== undefined) {
    output.writeFieldBegin('internalName', Thrift.Type.STRING, 3);
    output.writeString(this.internalName);
    output.writeFieldEnd();
  }
  if (this.externalName !== null && this.externalName !== undefined) {
    output.writeFieldBegin('externalName', Thrift.Type.STRING, 4);
    output.writeString(this.externalName);
    output.writeFieldEnd();
  }
  if (this.slug !== null && this.slug !== undefined) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 5);
    output.writeString(this.slug);
    output.writeFieldEnd();
  }
  if (this.section !== null && this.section !== undefined) {
    output.writeFieldBegin('section', Thrift.Type.STRUCT, 6);
    this.section.write(output);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 7);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TagUsage = module.exports.TagUsage = function(args) {
  this.tag = null;
  this.isLead = false;
  if (args) {
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = new ttypes.Tag(args.tag);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tag is unset!');
    }
    if (args.isLead !== undefined && args.isLead !== null) {
      this.isLead = args.isLead;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isLead is unset!');
    }
  }
};
TagUsage.prototype = {};
TagUsage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tag = new ttypes.Tag();
        this.tag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isLead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TagUsage.prototype.write = function(output) {
  output.writeStructBegin('TagUsage');
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRUCT, 1);
    this.tag.write(output);
    output.writeFieldEnd();
  }
  if (this.isLead !== null && this.isLead !== undefined) {
    output.writeFieldBegin('isLead', Thrift.Type.BOOL, 2);
    output.writeBool(this.isLead);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ElementFields = module.exports.ElementFields = function(args) {
  this.alt = null;
  this.apiUrl = null;
  this.attribution = null;
  this.authorGuardianProfileUrl = null;
  this.authorName = null;
  this.authorUrl = null;
  this.authorUsername = null;
  this.authorWitnessProfileUrl = null;
  this.blockAds = null;
  this.caption = null;
  this.comment = null;
  this.commentId = null;
  this.commentUrl = null;
  this.copyright = null;
  this.dateCreated = null;
  this.description = null;
  this.discussionKey = null;
  this.discussionUrl = null;
  this.displayCredit = null;
  this.duration = null;
  this.guardianPageId = null;
  this.height = null;
  this.hideMedia = null;
  this.hideThread = null;
  this.html = null;
  this.id = null;
  this.iframeUrl = null;
  this.imageType = null;
  this.language = null;
  this.linkPrefix = null;
  this.linkText = null;
  this.mediaApiUri = null;
  this.mediaId = null;
  this.originalUrl = null;
  this.photographer = null;
  this.picdarUrn = null;
  this.role = null;
  this.safeEmbedCode = null;
  this.scriptName = null;
  this.scriptUrl = null;
  this.shortUrl = null;
  this.signedOutAltText = null;
  this.source = null;
  this.sourceUrl = null;
  this.suppliersReference = null;
  this.tableUrl = null;
  this.text = null;
  this.title = null;
  this.url = null;
  this.viewKey = null;
  this.width = null;
  this.witnessEmbedType = null;
  this.youtubeAuthorName = null;
  this.youtubeDescription = null;
  this.youtubeHtml = null;
  this.youtubeSource = null;
  this.youtubeTitle = null;
  this.youtubeUrl = null;
  this.contentAuthSystem = null;
  this.venue = null;
  this.location = null;
  this.identifier = null;
  this.price = null;
  this.image = null;
  this.start = null;
  this.embeddable = null;
  this.stillImageUrl = null;
  this.thumbnailUrl = null;
  this.atomType = null;
  if (args) {
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
    if (args.apiUrl !== undefined && args.apiUrl !== null) {
      this.apiUrl = args.apiUrl;
    }
    if (args.attribution !== undefined && args.attribution !== null) {
      this.attribution = args.attribution;
    }
    if (args.authorGuardianProfileUrl !== undefined && args.authorGuardianProfileUrl !== null) {
      this.authorGuardianProfileUrl = args.authorGuardianProfileUrl;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.authorUrl !== undefined && args.authorUrl !== null) {
      this.authorUrl = args.authorUrl;
    }
    if (args.authorUsername !== undefined && args.authorUsername !== null) {
      this.authorUsername = args.authorUsername;
    }
    if (args.authorWitnessProfileUrl !== undefined && args.authorWitnessProfileUrl !== null) {
      this.authorWitnessProfileUrl = args.authorWitnessProfileUrl;
    }
    if (args.blockAds !== undefined && args.blockAds !== null) {
      this.blockAds = args.blockAds;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.commentId !== undefined && args.commentId !== null) {
      this.commentId = args.commentId;
    }
    if (args.commentUrl !== undefined && args.commentUrl !== null) {
      this.commentUrl = args.commentUrl;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.dateCreated !== undefined && args.dateCreated !== null) {
      this.dateCreated = args.dateCreated;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.discussionKey !== undefined && args.discussionKey !== null) {
      this.discussionKey = args.discussionKey;
    }
    if (args.discussionUrl !== undefined && args.discussionUrl !== null) {
      this.discussionUrl = args.discussionUrl;
    }
    if (args.displayCredit !== undefined && args.displayCredit !== null) {
      this.displayCredit = args.displayCredit;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.guardianPageId !== undefined && args.guardianPageId !== null) {
      this.guardianPageId = args.guardianPageId;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.hideMedia !== undefined && args.hideMedia !== null) {
      this.hideMedia = args.hideMedia;
    }
    if (args.hideThread !== undefined && args.hideThread !== null) {
      this.hideThread = args.hideThread;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.iframeUrl !== undefined && args.iframeUrl !== null) {
      this.iframeUrl = args.iframeUrl;
    }
    if (args.imageType !== undefined && args.imageType !== null) {
      this.imageType = args.imageType;
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.linkPrefix !== undefined && args.linkPrefix !== null) {
      this.linkPrefix = args.linkPrefix;
    }
    if (args.linkText !== undefined && args.linkText !== null) {
      this.linkText = args.linkText;
    }
    if (args.mediaApiUri !== undefined && args.mediaApiUri !== null) {
      this.mediaApiUri = args.mediaApiUri;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.photographer !== undefined && args.photographer !== null) {
      this.photographer = args.photographer;
    }
    if (args.picdarUrn !== undefined && args.picdarUrn !== null) {
      this.picdarUrn = args.picdarUrn;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.safeEmbedCode !== undefined && args.safeEmbedCode !== null) {
      this.safeEmbedCode = args.safeEmbedCode;
    }
    if (args.scriptName !== undefined && args.scriptName !== null) {
      this.scriptName = args.scriptName;
    }
    if (args.scriptUrl !== undefined && args.scriptUrl !== null) {
      this.scriptUrl = args.scriptUrl;
    }
    if (args.shortUrl !== undefined && args.shortUrl !== null) {
      this.shortUrl = args.shortUrl;
    }
    if (args.signedOutAltText !== undefined && args.signedOutAltText !== null) {
      this.signedOutAltText = args.signedOutAltText;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.sourceUrl !== undefined && args.sourceUrl !== null) {
      this.sourceUrl = args.sourceUrl;
    }
    if (args.suppliersReference !== undefined && args.suppliersReference !== null) {
      this.suppliersReference = args.suppliersReference;
    }
    if (args.tableUrl !== undefined && args.tableUrl !== null) {
      this.tableUrl = args.tableUrl;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.viewKey !== undefined && args.viewKey !== null) {
      this.viewKey = args.viewKey;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.witnessEmbedType !== undefined && args.witnessEmbedType !== null) {
      this.witnessEmbedType = args.witnessEmbedType;
    }
    if (args.youtubeAuthorName !== undefined && args.youtubeAuthorName !== null) {
      this.youtubeAuthorName = args.youtubeAuthorName;
    }
    if (args.youtubeDescription !== undefined && args.youtubeDescription !== null) {
      this.youtubeDescription = args.youtubeDescription;
    }
    if (args.youtubeHtml !== undefined && args.youtubeHtml !== null) {
      this.youtubeHtml = args.youtubeHtml;
    }
    if (args.youtubeSource !== undefined && args.youtubeSource !== null) {
      this.youtubeSource = args.youtubeSource;
    }
    if (args.youtubeTitle !== undefined && args.youtubeTitle !== null) {
      this.youtubeTitle = args.youtubeTitle;
    }
    if (args.youtubeUrl !== undefined && args.youtubeUrl !== null) {
      this.youtubeUrl = args.youtubeUrl;
    }
    if (args.contentAuthSystem !== undefined && args.contentAuthSystem !== null) {
      this.contentAuthSystem = args.contentAuthSystem;
    }
    if (args.venue !== undefined && args.venue !== null) {
      this.venue = args.venue;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.embeddable !== undefined && args.embeddable !== null) {
      this.embeddable = args.embeddable;
    }
    if (args.stillImageUrl !== undefined && args.stillImageUrl !== null) {
      this.stillImageUrl = args.stillImageUrl;
    }
    if (args.thumbnailUrl !== undefined && args.thumbnailUrl !== null) {
      this.thumbnailUrl = args.thumbnailUrl;
    }
    if (args.atomType !== undefined && args.atomType !== null) {
      this.atomType = args.atomType;
    }
  }
};
ElementFields.prototype = {};
ElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apiUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.attribution = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.authorGuardianProfileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.authorUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.authorUsername = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.authorWitnessProfileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.blockAds = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.commentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.commentUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.dateCreated = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.discussionKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.discussionUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.displayCredit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.duration = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.guardianPageId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.BOOL) {
        this.hideMedia = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.hideThread = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRING) {
        this.iframeUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRING) {
        this.imageType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.linkPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRING) {
        this.linkText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRING) {
        this.mediaApiUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRING) {
        this.photographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRING) {
        this.picdarUrn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.safeEmbedCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRING) {
        this.scriptName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.scriptUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRING) {
        this.shortUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRING) {
        this.signedOutAltText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRING) {
        this.sourceUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRING) {
        this.suppliersReference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRING) {
        this.tableUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.viewKey = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRING) {
        this.witnessEmbedType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeAuthorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeHtml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeTitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRING) {
        this.contentAuthSystem = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRING) {
        this.venue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 64:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.STRING) {
        this.embeddable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.STRING) {
        this.stillImageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRING) {
        this.atomType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ElementFields.prototype.write = function(output) {
  output.writeStructBegin('ElementFields');
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 1);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  if (this.apiUrl !== null && this.apiUrl !== undefined) {
    output.writeFieldBegin('apiUrl', Thrift.Type.STRING, 2);
    output.writeString(this.apiUrl);
    output.writeFieldEnd();
  }
  if (this.attribution !== null && this.attribution !== undefined) {
    output.writeFieldBegin('attribution', Thrift.Type.STRING, 3);
    output.writeString(this.attribution);
    output.writeFieldEnd();
  }
  if (this.authorGuardianProfileUrl !== null && this.authorGuardianProfileUrl !== undefined) {
    output.writeFieldBegin('authorGuardianProfileUrl', Thrift.Type.STRING, 4);
    output.writeString(this.authorGuardianProfileUrl);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 5);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.authorUrl !== null && this.authorUrl !== undefined) {
    output.writeFieldBegin('authorUrl', Thrift.Type.STRING, 6);
    output.writeString(this.authorUrl);
    output.writeFieldEnd();
  }
  if (this.authorUsername !== null && this.authorUsername !== undefined) {
    output.writeFieldBegin('authorUsername', Thrift.Type.STRING, 7);
    output.writeString(this.authorUsername);
    output.writeFieldEnd();
  }
  if (this.authorWitnessProfileUrl !== null && this.authorWitnessProfileUrl !== undefined) {
    output.writeFieldBegin('authorWitnessProfileUrl', Thrift.Type.STRING, 8);
    output.writeString(this.authorWitnessProfileUrl);
    output.writeFieldEnd();
  }
  if (this.blockAds !== null && this.blockAds !== undefined) {
    output.writeFieldBegin('blockAds', Thrift.Type.STRING, 9);
    output.writeString(this.blockAds);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 10);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 11);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.commentId !== null && this.commentId !== undefined) {
    output.writeFieldBegin('commentId', Thrift.Type.STRING, 12);
    output.writeString(this.commentId);
    output.writeFieldEnd();
  }
  if (this.commentUrl !== null && this.commentUrl !== undefined) {
    output.writeFieldBegin('commentUrl', Thrift.Type.STRING, 13);
    output.writeString(this.commentUrl);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 14);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.dateCreated !== null && this.dateCreated !== undefined) {
    output.writeFieldBegin('dateCreated', Thrift.Type.STRING, 15);
    output.writeString(this.dateCreated);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 16);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.discussionKey !== null && this.discussionKey !== undefined) {
    output.writeFieldBegin('discussionKey', Thrift.Type.STRING, 17);
    output.writeString(this.discussionKey);
    output.writeFieldEnd();
  }
  if (this.discussionUrl !== null && this.discussionUrl !== undefined) {
    output.writeFieldBegin('discussionUrl', Thrift.Type.STRING, 18);
    output.writeString(this.discussionUrl);
    output.writeFieldEnd();
  }
  if (this.displayCredit !== null && this.displayCredit !== undefined) {
    output.writeFieldBegin('displayCredit', Thrift.Type.STRING, 19);
    output.writeString(this.displayCredit);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.STRING, 20);
    output.writeString(this.duration);
    output.writeFieldEnd();
  }
  if (this.guardianPageId !== null && this.guardianPageId !== undefined) {
    output.writeFieldBegin('guardianPageId', Thrift.Type.STRING, 21);
    output.writeString(this.guardianPageId);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 22);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.hideMedia !== null && this.hideMedia !== undefined) {
    output.writeFieldBegin('hideMedia', Thrift.Type.BOOL, 23);
    output.writeBool(this.hideMedia);
    output.writeFieldEnd();
  }
  if (this.hideThread !== null && this.hideThread !== undefined) {
    output.writeFieldBegin('hideThread', Thrift.Type.BOOL, 24);
    output.writeBool(this.hideThread);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 25);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 26);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.iframeUrl !== null && this.iframeUrl !== undefined) {
    output.writeFieldBegin('iframeUrl', Thrift.Type.STRING, 27);
    output.writeString(this.iframeUrl);
    output.writeFieldEnd();
  }
  if (this.imageType !== null && this.imageType !== undefined) {
    output.writeFieldBegin('imageType', Thrift.Type.STRING, 28);
    output.writeString(this.imageType);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 29);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.linkPrefix !== null && this.linkPrefix !== undefined) {
    output.writeFieldBegin('linkPrefix', Thrift.Type.STRING, 30);
    output.writeString(this.linkPrefix);
    output.writeFieldEnd();
  }
  if (this.linkText !== null && this.linkText !== undefined) {
    output.writeFieldBegin('linkText', Thrift.Type.STRING, 31);
    output.writeString(this.linkText);
    output.writeFieldEnd();
  }
  if (this.mediaApiUri !== null && this.mediaApiUri !== undefined) {
    output.writeFieldBegin('mediaApiUri', Thrift.Type.STRING, 32);
    output.writeString(this.mediaApiUri);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 33);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 34);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.photographer !== null && this.photographer !== undefined) {
    output.writeFieldBegin('photographer', Thrift.Type.STRING, 35);
    output.writeString(this.photographer);
    output.writeFieldEnd();
  }
  if (this.picdarUrn !== null && this.picdarUrn !== undefined) {
    output.writeFieldBegin('picdarUrn', Thrift.Type.STRING, 36);
    output.writeString(this.picdarUrn);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 37);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.safeEmbedCode !== null && this.safeEmbedCode !== undefined) {
    output.writeFieldBegin('safeEmbedCode', Thrift.Type.STRING, 38);
    output.writeString(this.safeEmbedCode);
    output.writeFieldEnd();
  }
  if (this.scriptName !== null && this.scriptName !== undefined) {
    output.writeFieldBegin('scriptName', Thrift.Type.STRING, 39);
    output.writeString(this.scriptName);
    output.writeFieldEnd();
  }
  if (this.scriptUrl !== null && this.scriptUrl !== undefined) {
    output.writeFieldBegin('scriptUrl', Thrift.Type.STRING, 40);
    output.writeString(this.scriptUrl);
    output.writeFieldEnd();
  }
  if (this.shortUrl !== null && this.shortUrl !== undefined) {
    output.writeFieldBegin('shortUrl', Thrift.Type.STRING, 41);
    output.writeString(this.shortUrl);
    output.writeFieldEnd();
  }
  if (this.signedOutAltText !== null && this.signedOutAltText !== undefined) {
    output.writeFieldBegin('signedOutAltText', Thrift.Type.STRING, 42);
    output.writeString(this.signedOutAltText);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 43);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.sourceUrl !== null && this.sourceUrl !== undefined) {
    output.writeFieldBegin('sourceUrl', Thrift.Type.STRING, 44);
    output.writeString(this.sourceUrl);
    output.writeFieldEnd();
  }
  if (this.suppliersReference !== null && this.suppliersReference !== undefined) {
    output.writeFieldBegin('suppliersReference', Thrift.Type.STRING, 45);
    output.writeString(this.suppliersReference);
    output.writeFieldEnd();
  }
  if (this.tableUrl !== null && this.tableUrl !== undefined) {
    output.writeFieldBegin('tableUrl', Thrift.Type.STRING, 46);
    output.writeString(this.tableUrl);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 47);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 48);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 49);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.viewKey !== null && this.viewKey !== undefined) {
    output.writeFieldBegin('viewKey', Thrift.Type.STRING, 50);
    output.writeString(this.viewKey);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 51);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.witnessEmbedType !== null && this.witnessEmbedType !== undefined) {
    output.writeFieldBegin('witnessEmbedType', Thrift.Type.STRING, 52);
    output.writeString(this.witnessEmbedType);
    output.writeFieldEnd();
  }
  if (this.youtubeAuthorName !== null && this.youtubeAuthorName !== undefined) {
    output.writeFieldBegin('youtubeAuthorName', Thrift.Type.STRING, 53);
    output.writeString(this.youtubeAuthorName);
    output.writeFieldEnd();
  }
  if (this.youtubeDescription !== null && this.youtubeDescription !== undefined) {
    output.writeFieldBegin('youtubeDescription', Thrift.Type.STRING, 54);
    output.writeString(this.youtubeDescription);
    output.writeFieldEnd();
  }
  if (this.youtubeHtml !== null && this.youtubeHtml !== undefined) {
    output.writeFieldBegin('youtubeHtml', Thrift.Type.STRING, 55);
    output.writeString(this.youtubeHtml);
    output.writeFieldEnd();
  }
  if (this.youtubeSource !== null && this.youtubeSource !== undefined) {
    output.writeFieldBegin('youtubeSource', Thrift.Type.STRING, 56);
    output.writeString(this.youtubeSource);
    output.writeFieldEnd();
  }
  if (this.youtubeTitle !== null && this.youtubeTitle !== undefined) {
    output.writeFieldBegin('youtubeTitle', Thrift.Type.STRING, 57);
    output.writeString(this.youtubeTitle);
    output.writeFieldEnd();
  }
  if (this.youtubeUrl !== null && this.youtubeUrl !== undefined) {
    output.writeFieldBegin('youtubeUrl', Thrift.Type.STRING, 58);
    output.writeString(this.youtubeUrl);
    output.writeFieldEnd();
  }
  if (this.contentAuthSystem !== null && this.contentAuthSystem !== undefined) {
    output.writeFieldBegin('contentAuthSystem', Thrift.Type.STRING, 59);
    output.writeString(this.contentAuthSystem);
    output.writeFieldEnd();
  }
  if (this.venue !== null && this.venue !== undefined) {
    output.writeFieldBegin('venue', Thrift.Type.STRING, 60);
    output.writeString(this.venue);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 61);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 62);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 63);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 64);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 65);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.embeddable !== null && this.embeddable !== undefined) {
    output.writeFieldBegin('embeddable', Thrift.Type.STRING, 67);
    output.writeString(this.embeddable);
    output.writeFieldEnd();
  }
  if (this.stillImageUrl !== null && this.stillImageUrl !== undefined) {
    output.writeFieldBegin('stillImageUrl', Thrift.Type.STRING, 68);
    output.writeString(this.stillImageUrl);
    output.writeFieldEnd();
  }
  if (this.thumbnailUrl !== null && this.thumbnailUrl !== undefined) {
    output.writeFieldBegin('thumbnailUrl', Thrift.Type.STRING, 69);
    output.writeString(this.thumbnailUrl);
    output.writeFieldEnd();
  }
  if (this.atomType !== null && this.atomType !== undefined) {
    output.writeFieldBegin('atomType', Thrift.Type.STRING, 70);
    output.writeString(this.atomType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AssetFields = module.exports.AssetFields = function(args) {
  this.aspectRatio = null;
  this.guardianAltText = null;
  this.guardianBlockAds = null;
  this.guardianCaption = null;
  this.guardianCredit = null;
  this.guardianEmbeddable = null;
  this.guardianPhotographer = null;
  this.guardianSource = null;
  this.guardianStillImageUrl = null;
  this.height = null;
  this.name = null;
  this.secureFile = null;
  this.width = null;
  this.isMaster = null;
  this.sizeInBytes = null;
  if (args) {
    if (args.aspectRatio !== undefined && args.aspectRatio !== null) {
      this.aspectRatio = args.aspectRatio;
    }
    if (args.guardianAltText !== undefined && args.guardianAltText !== null) {
      this.guardianAltText = args.guardianAltText;
    }
    if (args.guardianBlockAds !== undefined && args.guardianBlockAds !== null) {
      this.guardianBlockAds = args.guardianBlockAds;
    }
    if (args.guardianCaption !== undefined && args.guardianCaption !== null) {
      this.guardianCaption = args.guardianCaption;
    }
    if (args.guardianCredit !== undefined && args.guardianCredit !== null) {
      this.guardianCredit = args.guardianCredit;
    }
    if (args.guardianEmbeddable !== undefined && args.guardianEmbeddable !== null) {
      this.guardianEmbeddable = args.guardianEmbeddable;
    }
    if (args.guardianPhotographer !== undefined && args.guardianPhotographer !== null) {
      this.guardianPhotographer = args.guardianPhotographer;
    }
    if (args.guardianSource !== undefined && args.guardianSource !== null) {
      this.guardianSource = args.guardianSource;
    }
    if (args.guardianStillImageUrl !== undefined && args.guardianStillImageUrl !== null) {
      this.guardianStillImageUrl = args.guardianStillImageUrl;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.secureFile !== undefined && args.secureFile !== null) {
      this.secureFile = args.secureFile;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.isMaster !== undefined && args.isMaster !== null) {
      this.isMaster = args.isMaster;
    }
    if (args.sizeInBytes !== undefined && args.sizeInBytes !== null) {
      this.sizeInBytes = args.sizeInBytes;
    }
  }
};
AssetFields.prototype = {};
AssetFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.aspectRatio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.guardianAltText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.guardianBlockAds = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.guardianCaption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.guardianCredit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.guardianEmbeddable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.guardianPhotographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.guardianSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.guardianStillImageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.secureFile = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.isMaster = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.sizeInBytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AssetFields.prototype.write = function(output) {
  output.writeStructBegin('AssetFields');
  if (this.aspectRatio !== null && this.aspectRatio !== undefined) {
    output.writeFieldBegin('aspectRatio', Thrift.Type.STRING, 1);
    output.writeString(this.aspectRatio);
    output.writeFieldEnd();
  }
  if (this.guardianAltText !== null && this.guardianAltText !== undefined) {
    output.writeFieldBegin('guardianAltText', Thrift.Type.STRING, 2);
    output.writeString(this.guardianAltText);
    output.writeFieldEnd();
  }
  if (this.guardianBlockAds !== null && this.guardianBlockAds !== undefined) {
    output.writeFieldBegin('guardianBlockAds', Thrift.Type.BOOL, 3);
    output.writeBool(this.guardianBlockAds);
    output.writeFieldEnd();
  }
  if (this.guardianCaption !== null && this.guardianCaption !== undefined) {
    output.writeFieldBegin('guardianCaption', Thrift.Type.STRING, 4);
    output.writeString(this.guardianCaption);
    output.writeFieldEnd();
  }
  if (this.guardianCredit !== null && this.guardianCredit !== undefined) {
    output.writeFieldBegin('guardianCredit', Thrift.Type.STRING, 5);
    output.writeString(this.guardianCredit);
    output.writeFieldEnd();
  }
  if (this.guardianEmbeddable !== null && this.guardianEmbeddable !== undefined) {
    output.writeFieldBegin('guardianEmbeddable', Thrift.Type.STRING, 6);
    output.writeString(this.guardianEmbeddable);
    output.writeFieldEnd();
  }
  if (this.guardianPhotographer !== null && this.guardianPhotographer !== undefined) {
    output.writeFieldBegin('guardianPhotographer', Thrift.Type.STRING, 7);
    output.writeString(this.guardianPhotographer);
    output.writeFieldEnd();
  }
  if (this.guardianSource !== null && this.guardianSource !== undefined) {
    output.writeFieldBegin('guardianSource', Thrift.Type.STRING, 8);
    output.writeString(this.guardianSource);
    output.writeFieldEnd();
  }
  if (this.guardianStillImageUrl !== null && this.guardianStillImageUrl !== undefined) {
    output.writeFieldBegin('guardianStillImageUrl', Thrift.Type.STRING, 9);
    output.writeString(this.guardianStillImageUrl);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 10);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 11);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.secureFile !== null && this.secureFile !== undefined) {
    output.writeFieldBegin('secureFile', Thrift.Type.STRING, 12);
    output.writeString(this.secureFile);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 13);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.isMaster !== null && this.isMaster !== undefined) {
    output.writeFieldBegin('isMaster', Thrift.Type.BOOL, 14);
    output.writeBool(this.isMaster);
    output.writeFieldEnd();
  }
  if (this.sizeInBytes !== null && this.sizeInBytes !== undefined) {
    output.writeFieldBegin('sizeInBytes', Thrift.Type.I64, 15);
    output.writeI64(this.sizeInBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TextElementFields = module.exports.TextElementFields = function(args) {
  this.html = null;
  if (args) {
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
  }
};
TextElementFields.prototype = {};
TextElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TextElementFields.prototype.write = function(output) {
  output.writeStructBegin('TextElementFields');
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 1);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VideoElementFields = module.exports.VideoElementFields = function(args) {
  this.url = null;
  this.description = null;
  this.title = null;
  this.html = null;
  this.source = null;
  this.credit = null;
  this.caption = null;
  this.width = null;
  this.height = null;
  this.duration = null;
  this.contentAuthSystem = null;
  this.mediaId = null;
  this.embeddable = null;
  this.blockAds = null;
  this.stillImageUrl = null;
  this.thumbnailImageUrl = null;
  this.shortUrl = null;
  this.role = null;
  this.originalUrl = null;
  this.guardianHoldingImageSource = null;
  this.guardianHoldingImagePhotographer = null;
  this.guardianHoldingImagePicdarUrn = null;
  this.guardianHoldingImageCopyright = null;
  this.guardianHoldingImageSuppliersReference = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.contentAuthSystem !== undefined && args.contentAuthSystem !== null) {
      this.contentAuthSystem = args.contentAuthSystem;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
    if (args.embeddable !== undefined && args.embeddable !== null) {
      this.embeddable = args.embeddable;
    }
    if (args.blockAds !== undefined && args.blockAds !== null) {
      this.blockAds = args.blockAds;
    }
    if (args.stillImageUrl !== undefined && args.stillImageUrl !== null) {
      this.stillImageUrl = args.stillImageUrl;
    }
    if (args.thumbnailImageUrl !== undefined && args.thumbnailImageUrl !== null) {
      this.thumbnailImageUrl = args.thumbnailImageUrl;
    }
    if (args.shortUrl !== undefined && args.shortUrl !== null) {
      this.shortUrl = args.shortUrl;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.guardianHoldingImageSource !== undefined && args.guardianHoldingImageSource !== null) {
      this.guardianHoldingImageSource = args.guardianHoldingImageSource;
    }
    if (args.guardianHoldingImagePhotographer !== undefined && args.guardianHoldingImagePhotographer !== null) {
      this.guardianHoldingImagePhotographer = args.guardianHoldingImagePhotographer;
    }
    if (args.guardianHoldingImagePicdarUrn !== undefined && args.guardianHoldingImagePicdarUrn !== null) {
      this.guardianHoldingImagePicdarUrn = args.guardianHoldingImagePicdarUrn;
    }
    if (args.guardianHoldingImageCopyright !== undefined && args.guardianHoldingImageCopyright !== null) {
      this.guardianHoldingImageCopyright = args.guardianHoldingImageCopyright;
    }
    if (args.guardianHoldingImageSuppliersReference !== undefined && args.guardianHoldingImageSuppliersReference !== null) {
      this.guardianHoldingImageSuppliersReference = args.guardianHoldingImageSuppliersReference;
    }
  }
};
VideoElementFields.prototype = {};
VideoElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.duration = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.contentAuthSystem = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.embeddable = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.blockAds = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.stillImageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnailImageUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.shortUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.guardianHoldingImageSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.guardianHoldingImagePhotographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.guardianHoldingImagePicdarUrn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.guardianHoldingImageCopyright = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.guardianHoldingImageSuppliersReference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VideoElementFields.prototype.write = function(output) {
  output.writeStructBegin('VideoElementFields');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 4);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 5);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 6);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 7);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 8);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 9);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.I32, 10);
    output.writeI32(this.duration);
    output.writeFieldEnd();
  }
  if (this.contentAuthSystem !== null && this.contentAuthSystem !== undefined) {
    output.writeFieldBegin('contentAuthSystem', Thrift.Type.STRING, 11);
    output.writeString(this.contentAuthSystem);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 12);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  if (this.embeddable !== null && this.embeddable !== undefined) {
    output.writeFieldBegin('embeddable', Thrift.Type.STRING, 13);
    output.writeString(this.embeddable);
    output.writeFieldEnd();
  }
  if (this.blockAds !== null && this.blockAds !== undefined) {
    output.writeFieldBegin('blockAds', Thrift.Type.BOOL, 14);
    output.writeBool(this.blockAds);
    output.writeFieldEnd();
  }
  if (this.stillImageUrl !== null && this.stillImageUrl !== undefined) {
    output.writeFieldBegin('stillImageUrl', Thrift.Type.STRING, 15);
    output.writeString(this.stillImageUrl);
    output.writeFieldEnd();
  }
  if (this.thumbnailImageUrl !== null && this.thumbnailImageUrl !== undefined) {
    output.writeFieldBegin('thumbnailImageUrl', Thrift.Type.STRING, 16);
    output.writeString(this.thumbnailImageUrl);
    output.writeFieldEnd();
  }
  if (this.shortUrl !== null && this.shortUrl !== undefined) {
    output.writeFieldBegin('shortUrl', Thrift.Type.STRING, 17);
    output.writeString(this.shortUrl);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 18);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 19);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.guardianHoldingImageSource !== null && this.guardianHoldingImageSource !== undefined) {
    output.writeFieldBegin('guardianHoldingImageSource', Thrift.Type.STRING, 20);
    output.writeString(this.guardianHoldingImageSource);
    output.writeFieldEnd();
  }
  if (this.guardianHoldingImagePhotographer !== null && this.guardianHoldingImagePhotographer !== undefined) {
    output.writeFieldBegin('guardianHoldingImagePhotographer', Thrift.Type.STRING, 21);
    output.writeString(this.guardianHoldingImagePhotographer);
    output.writeFieldEnd();
  }
  if (this.guardianHoldingImagePicdarUrn !== null && this.guardianHoldingImagePicdarUrn !== undefined) {
    output.writeFieldBegin('guardianHoldingImagePicdarUrn', Thrift.Type.STRING, 22);
    output.writeString(this.guardianHoldingImagePicdarUrn);
    output.writeFieldEnd();
  }
  if (this.guardianHoldingImageCopyright !== null && this.guardianHoldingImageCopyright !== undefined) {
    output.writeFieldBegin('guardianHoldingImageCopyright', Thrift.Type.STRING, 23);
    output.writeString(this.guardianHoldingImageCopyright);
    output.writeFieldEnd();
  }
  if (this.guardianHoldingImageSuppliersReference !== null && this.guardianHoldingImageSuppliersReference !== undefined) {
    output.writeFieldBegin('guardianHoldingImageSuppliersReference', Thrift.Type.STRING, 24);
    output.writeString(this.guardianHoldingImageSuppliersReference);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AudioElementFields = module.exports.AudioElementFields = function(args) {
  this.html = null;
  this.description = null;
  this.source = null;
  this.title = null;
  this.credit = null;
  this.caption = null;
  this.authorName = null;
  this.originalUrl = null;
  this.height = null;
  this.width = null;
  this.durationMinutes = null;
  this.durationSeconds = null;
  this.clean = null;
  this.explicit = null;
  this.mediaId = null;
  if (args) {
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.durationMinutes !== undefined && args.durationMinutes !== null) {
      this.durationMinutes = args.durationMinutes;
    }
    if (args.durationSeconds !== undefined && args.durationSeconds !== null) {
      this.durationSeconds = args.durationSeconds;
    }
    if (args.clean !== undefined && args.clean !== null) {
      this.clean = args.clean;
    }
    if (args.explicit !== undefined && args.explicit !== null) {
      this.explicit = args.explicit;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
  }
};
AudioElementFields.prototype = {};
AudioElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.durationMinutes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.durationSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.clean = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.explicit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AudioElementFields.prototype.write = function(output) {
  output.writeStructBegin('AudioElementFields');
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 1);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 5);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 6);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 7);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 8);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 9);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 10);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.durationMinutes !== null && this.durationMinutes !== undefined) {
    output.writeFieldBegin('durationMinutes', Thrift.Type.I32, 11);
    output.writeI32(this.durationMinutes);
    output.writeFieldEnd();
  }
  if (this.durationSeconds !== null && this.durationSeconds !== undefined) {
    output.writeFieldBegin('durationSeconds', Thrift.Type.I32, 12);
    output.writeI32(this.durationSeconds);
    output.writeFieldEnd();
  }
  if (this.clean !== null && this.clean !== undefined) {
    output.writeFieldBegin('clean', Thrift.Type.BOOL, 13);
    output.writeBool(this.clean);
    output.writeFieldEnd();
  }
  if (this.explicit !== null && this.explicit !== undefined) {
    output.writeFieldBegin('explicit', Thrift.Type.BOOL, 14);
    output.writeBool(this.explicit);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 15);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PullquoteElementFields = module.exports.PullquoteElementFields = function(args) {
  this.html = null;
  this.attribution = null;
  if (args) {
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.attribution !== undefined && args.attribution !== null) {
      this.attribution = args.attribution;
    }
  }
};
PullquoteElementFields.prototype = {};
PullquoteElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.attribution = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PullquoteElementFields.prototype.write = function(output) {
  output.writeStructBegin('PullquoteElementFields');
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 1);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.attribution !== null && this.attribution !== undefined) {
    output.writeFieldBegin('attribution', Thrift.Type.STRING, 2);
    output.writeString(this.attribution);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TweetElementFields = module.exports.TweetElementFields = function(args) {
  this.source = null;
  this.url = null;
  this.id = null;
  this.html = null;
  this.originalUrl = null;
  this.role = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
TweetElementFields.prototype = {};
TweetElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TweetElementFields.prototype.write = function(output) {
  output.writeStructBegin('TweetElementFields');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 4);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 5);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 6);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ImageElementFields = module.exports.ImageElementFields = function(args) {
  this.caption = null;
  this.copyright = null;
  this.displayCredit = null;
  this.source = null;
  this.photographer = null;
  this.alt = null;
  this.mediaId = null;
  this.mediaApiUri = null;
  this.picdarUrn = null;
  this.suppliersReference = null;
  this.imageType = null;
  this.credit = null;
  this.role = null;
  this.comment = null;
  if (args) {
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.displayCredit !== undefined && args.displayCredit !== null) {
      this.displayCredit = args.displayCredit;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.photographer !== undefined && args.photographer !== null) {
      this.photographer = args.photographer;
    }
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
    if (args.mediaApiUri !== undefined && args.mediaApiUri !== null) {
      this.mediaApiUri = args.mediaApiUri;
    }
    if (args.picdarUrn !== undefined && args.picdarUrn !== null) {
      this.picdarUrn = args.picdarUrn;
    }
    if (args.suppliersReference !== undefined && args.suppliersReference !== null) {
      this.suppliersReference = args.suppliersReference;
    }
    if (args.imageType !== undefined && args.imageType !== null) {
      this.imageType = args.imageType;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
ImageElementFields.prototype = {};
ImageElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.displayCredit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.photographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mediaApiUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.picdarUrn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.suppliersReference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.imageType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageElementFields.prototype.write = function(output) {
  output.writeStructBegin('ImageElementFields');
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 1);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 2);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.displayCredit !== null && this.displayCredit !== undefined) {
    output.writeFieldBegin('displayCredit', Thrift.Type.BOOL, 3);
    output.writeBool(this.displayCredit);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 4);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.photographer !== null && this.photographer !== undefined) {
    output.writeFieldBegin('photographer', Thrift.Type.STRING, 5);
    output.writeString(this.photographer);
    output.writeFieldEnd();
  }
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 6);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 7);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  if (this.mediaApiUri !== null && this.mediaApiUri !== undefined) {
    output.writeFieldBegin('mediaApiUri', Thrift.Type.STRING, 8);
    output.writeString(this.mediaApiUri);
    output.writeFieldEnd();
  }
  if (this.picdarUrn !== null && this.picdarUrn !== undefined) {
    output.writeFieldBegin('picdarUrn', Thrift.Type.STRING, 9);
    output.writeString(this.picdarUrn);
    output.writeFieldEnd();
  }
  if (this.suppliersReference !== null && this.suppliersReference !== undefined) {
    output.writeFieldBegin('suppliersReference', Thrift.Type.STRING, 10);
    output.writeString(this.suppliersReference);
    output.writeFieldEnd();
  }
  if (this.imageType !== null && this.imageType !== undefined) {
    output.writeFieldBegin('imageType', Thrift.Type.STRING, 11);
    output.writeString(this.imageType);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 12);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 13);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 14);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InteractiveElementFields = module.exports.InteractiveElementFields = function(args) {
  this.url = null;
  this.originalUrl = null;
  this.source = null;
  this.caption = null;
  this.alt = null;
  this.scriptUrl = null;
  this.html = null;
  this.scriptName = null;
  this.iframeUrl = null;
  this.role = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
    if (args.scriptUrl !== undefined && args.scriptUrl !== null) {
      this.scriptUrl = args.scriptUrl;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.scriptName !== undefined && args.scriptName !== null) {
      this.scriptName = args.scriptName;
    }
    if (args.iframeUrl !== undefined && args.iframeUrl !== null) {
      this.iframeUrl = args.iframeUrl;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
InteractiveElementFields.prototype = {};
InteractiveElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.scriptUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.scriptName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.iframeUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InteractiveElementFields.prototype.write = function(output) {
  output.writeStructBegin('InteractiveElementFields');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 2);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 4);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 5);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  if (this.scriptUrl !== null && this.scriptUrl !== undefined) {
    output.writeFieldBegin('scriptUrl', Thrift.Type.STRING, 6);
    output.writeString(this.scriptUrl);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 7);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.scriptName !== null && this.scriptName !== undefined) {
    output.writeFieldBegin('scriptName', Thrift.Type.STRING, 8);
    output.writeString(this.scriptName);
    output.writeFieldEnd();
  }
  if (this.iframeUrl !== null && this.iframeUrl !== undefined) {
    output.writeFieldBegin('iframeUrl', Thrift.Type.STRING, 9);
    output.writeString(this.iframeUrl);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 10);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StandardElementFields = module.exports.StandardElementFields = function(args) {
  this.url = null;
  this.originalUrl = null;
  this.source = null;
  this.title = null;
  this.description = null;
  this.credit = null;
  this.caption = null;
  this.width = null;
  this.height = null;
  this.html = null;
  this.role = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
StandardElementFields.prototype = {};
StandardElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StandardElementFields.prototype.write = function(output) {
  output.writeStructBegin('StandardElementFields');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 2);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 3);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 5);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 6);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 7);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 8);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 9);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 10);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 11);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WitnessElementFields = module.exports.WitnessElementFields = function(args) {
  this.url = null;
  this.originalUrl = null;
  this.witnessEmbedType = null;
  this.mediaId = null;
  this.source = null;
  this.title = null;
  this.description = null;
  this.authorName = null;
  this.authorUsername = null;
  this.authorWitnessProfileUrl = null;
  this.authorGuardianProfileUrl = null;
  this.caption = null;
  this.alt = null;
  this.width = null;
  this.height = null;
  this.html = null;
  this.apiUrl = null;
  this.photographer = null;
  this.dateCreated = null;
  this.youtubeUrl = null;
  this.youtubeSource = null;
  this.youtubeTitle = null;
  this.youtubeDescription = null;
  this.youtubeAuthorName = null;
  this.youtubeHtml = null;
  this.role = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.witnessEmbedType !== undefined && args.witnessEmbedType !== null) {
      this.witnessEmbedType = args.witnessEmbedType;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.authorName !== undefined && args.authorName !== null) {
      this.authorName = args.authorName;
    }
    if (args.authorUsername !== undefined && args.authorUsername !== null) {
      this.authorUsername = args.authorUsername;
    }
    if (args.authorWitnessProfileUrl !== undefined && args.authorWitnessProfileUrl !== null) {
      this.authorWitnessProfileUrl = args.authorWitnessProfileUrl;
    }
    if (args.authorGuardianProfileUrl !== undefined && args.authorGuardianProfileUrl !== null) {
      this.authorGuardianProfileUrl = args.authorGuardianProfileUrl;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.apiUrl !== undefined && args.apiUrl !== null) {
      this.apiUrl = args.apiUrl;
    }
    if (args.photographer !== undefined && args.photographer !== null) {
      this.photographer = args.photographer;
    }
    if (args.dateCreated !== undefined && args.dateCreated !== null) {
      this.dateCreated = args.dateCreated;
    }
    if (args.youtubeUrl !== undefined && args.youtubeUrl !== null) {
      this.youtubeUrl = args.youtubeUrl;
    }
    if (args.youtubeSource !== undefined && args.youtubeSource !== null) {
      this.youtubeSource = args.youtubeSource;
    }
    if (args.youtubeTitle !== undefined && args.youtubeTitle !== null) {
      this.youtubeTitle = args.youtubeTitle;
    }
    if (args.youtubeDescription !== undefined && args.youtubeDescription !== null) {
      this.youtubeDescription = args.youtubeDescription;
    }
    if (args.youtubeAuthorName !== undefined && args.youtubeAuthorName !== null) {
      this.youtubeAuthorName = args.youtubeAuthorName;
    }
    if (args.youtubeHtml !== undefined && args.youtubeHtml !== null) {
      this.youtubeHtml = args.youtubeHtml;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
WitnessElementFields.prototype = {};
WitnessElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.witnessEmbedType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.authorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.authorUsername = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.authorWitnessProfileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.authorGuardianProfileUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.width = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.height = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.apiUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.photographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.dateCreated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeSource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeTitle = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeDescription = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeAuthorName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRING) {
        this.youtubeHtml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WitnessElementFields.prototype.write = function(output) {
  output.writeStructBegin('WitnessElementFields');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 2);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.witnessEmbedType !== null && this.witnessEmbedType !== undefined) {
    output.writeFieldBegin('witnessEmbedType', Thrift.Type.STRING, 3);
    output.writeString(this.witnessEmbedType);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 4);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 5);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 6);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 7);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.authorName !== null && this.authorName !== undefined) {
    output.writeFieldBegin('authorName', Thrift.Type.STRING, 8);
    output.writeString(this.authorName);
    output.writeFieldEnd();
  }
  if (this.authorUsername !== null && this.authorUsername !== undefined) {
    output.writeFieldBegin('authorUsername', Thrift.Type.STRING, 9);
    output.writeString(this.authorUsername);
    output.writeFieldEnd();
  }
  if (this.authorWitnessProfileUrl !== null && this.authorWitnessProfileUrl !== undefined) {
    output.writeFieldBegin('authorWitnessProfileUrl', Thrift.Type.STRING, 10);
    output.writeString(this.authorWitnessProfileUrl);
    output.writeFieldEnd();
  }
  if (this.authorGuardianProfileUrl !== null && this.authorGuardianProfileUrl !== undefined) {
    output.writeFieldBegin('authorGuardianProfileUrl', Thrift.Type.STRING, 11);
    output.writeString(this.authorGuardianProfileUrl);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 12);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 13);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.I32, 14);
    output.writeI32(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.I32, 15);
    output.writeI32(this.height);
    output.writeFieldEnd();
  }
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 16);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.apiUrl !== null && this.apiUrl !== undefined) {
    output.writeFieldBegin('apiUrl', Thrift.Type.STRING, 17);
    output.writeString(this.apiUrl);
    output.writeFieldEnd();
  }
  if (this.photographer !== null && this.photographer !== undefined) {
    output.writeFieldBegin('photographer', Thrift.Type.STRING, 18);
    output.writeString(this.photographer);
    output.writeFieldEnd();
  }
  if (this.dateCreated !== null && this.dateCreated !== undefined) {
    output.writeFieldBegin('dateCreated', Thrift.Type.I64, 19);
    output.writeI64(this.dateCreated);
    output.writeFieldEnd();
  }
  if (this.youtubeUrl !== null && this.youtubeUrl !== undefined) {
    output.writeFieldBegin('youtubeUrl', Thrift.Type.STRING, 20);
    output.writeString(this.youtubeUrl);
    output.writeFieldEnd();
  }
  if (this.youtubeSource !== null && this.youtubeSource !== undefined) {
    output.writeFieldBegin('youtubeSource', Thrift.Type.STRING, 21);
    output.writeString(this.youtubeSource);
    output.writeFieldEnd();
  }
  if (this.youtubeTitle !== null && this.youtubeTitle !== undefined) {
    output.writeFieldBegin('youtubeTitle', Thrift.Type.STRING, 22);
    output.writeString(this.youtubeTitle);
    output.writeFieldEnd();
  }
  if (this.youtubeDescription !== null && this.youtubeDescription !== undefined) {
    output.writeFieldBegin('youtubeDescription', Thrift.Type.STRING, 23);
    output.writeString(this.youtubeDescription);
    output.writeFieldEnd();
  }
  if (this.youtubeAuthorName !== null && this.youtubeAuthorName !== undefined) {
    output.writeFieldBegin('youtubeAuthorName', Thrift.Type.STRING, 24);
    output.writeString(this.youtubeAuthorName);
    output.writeFieldEnd();
  }
  if (this.youtubeHtml !== null && this.youtubeHtml !== undefined) {
    output.writeFieldBegin('youtubeHtml', Thrift.Type.STRING, 25);
    output.writeString(this.youtubeHtml);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 26);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RichLinkElementFields = module.exports.RichLinkElementFields = function(args) {
  this.url = null;
  this.originalUrl = null;
  this.linkText = null;
  this.linkPrefix = null;
  this.role = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.linkText !== undefined && args.linkText !== null) {
      this.linkText = args.linkText;
    }
    if (args.linkPrefix !== undefined && args.linkPrefix !== null) {
      this.linkPrefix = args.linkPrefix;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
  }
};
RichLinkElementFields.prototype = {};
RichLinkElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.linkText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.linkPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RichLinkElementFields.prototype.write = function(output) {
  output.writeStructBegin('RichLinkElementFields');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 2);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.linkText !== null && this.linkText !== undefined) {
    output.writeFieldBegin('linkText', Thrift.Type.STRING, 3);
    output.writeString(this.linkText);
    output.writeFieldEnd();
  }
  if (this.linkPrefix !== null && this.linkPrefix !== undefined) {
    output.writeFieldBegin('linkPrefix', Thrift.Type.STRING, 4);
    output.writeString(this.linkPrefix);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 5);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MembershipElementFields = module.exports.MembershipElementFields = function(args) {
  this.originalUrl = null;
  this.linkText = null;
  this.linkPrefix = null;
  this.title = null;
  this.venue = null;
  this.location = null;
  this.identifier = null;
  this.image = null;
  this.price = null;
  this.start = null;
  if (args) {
    if (args.originalUrl !== undefined && args.originalUrl !== null) {
      this.originalUrl = args.originalUrl;
    }
    if (args.linkText !== undefined && args.linkText !== null) {
      this.linkText = args.linkText;
    }
    if (args.linkPrefix !== undefined && args.linkPrefix !== null) {
      this.linkPrefix = args.linkPrefix;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.venue !== undefined && args.venue !== null) {
      this.venue = args.venue;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.identifier !== undefined && args.identifier !== null) {
      this.identifier = args.identifier;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
  }
};
MembershipElementFields.prototype = {};
MembershipElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.originalUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.linkText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.linkPrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.venue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.identifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MembershipElementFields.prototype.write = function(output) {
  output.writeStructBegin('MembershipElementFields');
  if (this.originalUrl !== null && this.originalUrl !== undefined) {
    output.writeFieldBegin('originalUrl', Thrift.Type.STRING, 1);
    output.writeString(this.originalUrl);
    output.writeFieldEnd();
  }
  if (this.linkText !== null && this.linkText !== undefined) {
    output.writeFieldBegin('linkText', Thrift.Type.STRING, 2);
    output.writeString(this.linkText);
    output.writeFieldEnd();
  }
  if (this.linkPrefix !== null && this.linkPrefix !== undefined) {
    output.writeFieldBegin('linkPrefix', Thrift.Type.STRING, 3);
    output.writeString(this.linkPrefix);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 4);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.venue !== null && this.venue !== undefined) {
    output.writeFieldBegin('venue', Thrift.Type.STRING, 5);
    output.writeString(this.venue);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 6);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.identifier !== null && this.identifier !== undefined) {
    output.writeFieldBegin('identifier', Thrift.Type.STRING, 7);
    output.writeString(this.identifier);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 8);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 9);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 10);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmbedElementFields = module.exports.EmbedElementFields = function(args) {
  this.html = null;
  this.safeEmbedCode = null;
  this.alt = null;
  if (args) {
    if (args.html !== undefined && args.html !== null) {
      this.html = args.html;
    }
    if (args.safeEmbedCode !== undefined && args.safeEmbedCode !== null) {
      this.safeEmbedCode = args.safeEmbedCode;
    }
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
  }
};
EmbedElementFields.prototype = {};
EmbedElementFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.html = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.safeEmbedCode = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmbedElementFields.prototype.write = function(output) {
  output.writeStructBegin('EmbedElementFields');
  if (this.html !== null && this.html !== undefined) {
    output.writeFieldBegin('html', Thrift.Type.STRING, 1);
    output.writeString(this.html);
    output.writeFieldEnd();
  }
  if (this.safeEmbedCode !== null && this.safeEmbedCode !== undefined) {
    output.writeFieldBegin('safeEmbedCode', Thrift.Type.BOOL, 2);
    output.writeBool(this.safeEmbedCode);
    output.writeFieldEnd();
  }
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 3);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Asset = module.exports.Asset = function(args) {
  this.assetType = null;
  this.mimeType = null;
  this.url = null;
  this.fields = null;
  if (args) {
    if (args.assetType !== undefined && args.assetType !== null) {
      this.assetType = args.assetType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field assetType is unset!');
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mimeType is unset!');
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field url is unset!');
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = new ttypes.AssetFields(args.fields);
    }
  }
};
Asset.prototype = {};
Asset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.assetType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new ttypes.AssetFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Asset.prototype.write = function(output) {
  output.writeStructBegin('Asset');
  if (this.assetType !== null && this.assetType !== undefined) {
    output.writeFieldBegin('assetType', Thrift.Type.I32, 1);
    output.writeI32(this.assetType);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 2);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 4);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Element = module.exports.Element = function(args) {
  this.elementType = null;
  this.fields = null;
  this.assets = null;
  this.textFields = null;
  this.videoFields = null;
  this.tweetFields = null;
  this.imageFields = null;
  this.pullquoteFields = null;
  this.audioFields = null;
  this.interactiveFields = null;
  this.mapFields = null;
  this.documentFields = null;
  this.witnessFields = null;
  this.tableFields = null;
  this.richLinkFields = null;
  this.membershipFields = null;
  this.embedFields = null;
  if (args) {
    if (args.elementType !== undefined && args.elementType !== null) {
      this.elementType = args.elementType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elementType is unset!');
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = new ttypes.ElementFields(args.fields);
    }
    if (args.assets !== undefined && args.assets !== null) {
      this.assets = Thrift.copyList(args.assets, [ttypes.Asset]);
    }
    if (args.textFields !== undefined && args.textFields !== null) {
      this.textFields = new ttypes.TextElementFields(args.textFields);
    }
    if (args.videoFields !== undefined && args.videoFields !== null) {
      this.videoFields = new ttypes.VideoElementFields(args.videoFields);
    }
    if (args.tweetFields !== undefined && args.tweetFields !== null) {
      this.tweetFields = new ttypes.TweetElementFields(args.tweetFields);
    }
    if (args.imageFields !== undefined && args.imageFields !== null) {
      this.imageFields = new ttypes.ImageElementFields(args.imageFields);
    }
    if (args.pullquoteFields !== undefined && args.pullquoteFields !== null) {
      this.pullquoteFields = new ttypes.PullquoteElementFields(args.pullquoteFields);
    }
    if (args.audioFields !== undefined && args.audioFields !== null) {
      this.audioFields = new ttypes.AudioElementFields(args.audioFields);
    }
    if (args.interactiveFields !== undefined && args.interactiveFields !== null) {
      this.interactiveFields = new ttypes.InteractiveElementFields(args.interactiveFields);
    }
    if (args.mapFields !== undefined && args.mapFields !== null) {
      this.mapFields = new ttypes.StandardElementFields(args.mapFields);
    }
    if (args.documentFields !== undefined && args.documentFields !== null) {
      this.documentFields = new ttypes.StandardElementFields(args.documentFields);
    }
    if (args.witnessFields !== undefined && args.witnessFields !== null) {
      this.witnessFields = new ttypes.WitnessElementFields(args.witnessFields);
    }
    if (args.tableFields !== undefined && args.tableFields !== null) {
      this.tableFields = new ttypes.StandardElementFields(args.tableFields);
    }
    if (args.richLinkFields !== undefined && args.richLinkFields !== null) {
      this.richLinkFields = new ttypes.RichLinkElementFields(args.richLinkFields);
    }
    if (args.membershipFields !== undefined && args.membershipFields !== null) {
      this.membershipFields = new ttypes.MembershipElementFields(args.membershipFields);
    }
    if (args.embedFields !== undefined && args.embedFields !== null) {
      this.embedFields = new ttypes.EmbedElementFields(args.embedFields);
    }
  }
};
Element.prototype = {};
Element.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.elementType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new ttypes.ElementFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.assets = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Asset();
          elem6.read(input);
          this.assets.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.textFields = new ttypes.TextElementFields();
        this.textFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.videoFields = new ttypes.VideoElementFields();
        this.videoFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.tweetFields = new ttypes.TweetElementFields();
        this.tweetFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.imageFields = new ttypes.ImageElementFields();
        this.imageFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.pullquoteFields = new ttypes.PullquoteElementFields();
        this.pullquoteFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioFields = new ttypes.AudioElementFields();
        this.audioFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.interactiveFields = new ttypes.InteractiveElementFields();
        this.interactiveFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapFields = new ttypes.StandardElementFields();
        this.mapFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.documentFields = new ttypes.StandardElementFields();
        this.documentFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.witnessFields = new ttypes.WitnessElementFields();
        this.witnessFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableFields = new ttypes.StandardElementFields();
        this.tableFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.richLinkFields = new ttypes.RichLinkElementFields();
        this.richLinkFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.membershipFields = new ttypes.MembershipElementFields();
        this.membershipFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.embedFields = new ttypes.EmbedElementFields();
        this.embedFields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Element.prototype.write = function(output) {
  output.writeStructBegin('Element');
  if (this.elementType !== null && this.elementType !== undefined) {
    output.writeFieldBegin('elementType', Thrift.Type.I32, 1);
    output.writeI32(this.elementType);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 2);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.assets !== null && this.assets !== undefined) {
    output.writeFieldBegin('assets', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.assets.length);
    for (var iter7 in this.assets)
    {
      if (this.assets.hasOwnProperty(iter7))
      {
        iter7 = this.assets[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.textFields !== null && this.textFields !== undefined) {
    output.writeFieldBegin('textFields', Thrift.Type.STRUCT, 4);
    this.textFields.write(output);
    output.writeFieldEnd();
  }
  if (this.videoFields !== null && this.videoFields !== undefined) {
    output.writeFieldBegin('videoFields', Thrift.Type.STRUCT, 5);
    this.videoFields.write(output);
    output.writeFieldEnd();
  }
  if (this.tweetFields !== null && this.tweetFields !== undefined) {
    output.writeFieldBegin('tweetFields', Thrift.Type.STRUCT, 6);
    this.tweetFields.write(output);
    output.writeFieldEnd();
  }
  if (this.imageFields !== null && this.imageFields !== undefined) {
    output.writeFieldBegin('imageFields', Thrift.Type.STRUCT, 7);
    this.imageFields.write(output);
    output.writeFieldEnd();
  }
  if (this.pullquoteFields !== null && this.pullquoteFields !== undefined) {
    output.writeFieldBegin('pullquoteFields', Thrift.Type.STRUCT, 8);
    this.pullquoteFields.write(output);
    output.writeFieldEnd();
  }
  if (this.audioFields !== null && this.audioFields !== undefined) {
    output.writeFieldBegin('audioFields', Thrift.Type.STRUCT, 9);
    this.audioFields.write(output);
    output.writeFieldEnd();
  }
  if (this.interactiveFields !== null && this.interactiveFields !== undefined) {
    output.writeFieldBegin('interactiveFields', Thrift.Type.STRUCT, 10);
    this.interactiveFields.write(output);
    output.writeFieldEnd();
  }
  if (this.mapFields !== null && this.mapFields !== undefined) {
    output.writeFieldBegin('mapFields', Thrift.Type.STRUCT, 11);
    this.mapFields.write(output);
    output.writeFieldEnd();
  }
  if (this.documentFields !== null && this.documentFields !== undefined) {
    output.writeFieldBegin('documentFields', Thrift.Type.STRUCT, 12);
    this.documentFields.write(output);
    output.writeFieldEnd();
  }
  if (this.witnessFields !== null && this.witnessFields !== undefined) {
    output.writeFieldBegin('witnessFields', Thrift.Type.STRUCT, 13);
    this.witnessFields.write(output);
    output.writeFieldEnd();
  }
  if (this.tableFields !== null && this.tableFields !== undefined) {
    output.writeFieldBegin('tableFields', Thrift.Type.STRUCT, 14);
    this.tableFields.write(output);
    output.writeFieldEnd();
  }
  if (this.richLinkFields !== null && this.richLinkFields !== undefined) {
    output.writeFieldBegin('richLinkFields', Thrift.Type.STRUCT, 15);
    this.richLinkFields.write(output);
    output.writeFieldEnd();
  }
  if (this.membershipFields !== null && this.membershipFields !== undefined) {
    output.writeFieldBegin('membershipFields', Thrift.Type.STRUCT, 16);
    this.membershipFields.write(output);
    output.writeFieldEnd();
  }
  if (this.embedFields !== null && this.embedFields !== undefined) {
    output.writeFieldBegin('embedFields', Thrift.Type.STRUCT, 17);
    this.embedFields.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BlockAttributes = module.exports.BlockAttributes = function(args) {
  this.keyEvent = null;
  this.summary = null;
  this.title = null;
  this.pinned = null;
  if (args) {
    if (args.keyEvent !== undefined && args.keyEvent !== null) {
      this.keyEvent = args.keyEvent;
    }
    if (args.summary !== undefined && args.summary !== null) {
      this.summary = args.summary;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.pinned !== undefined && args.pinned !== null) {
      this.pinned = args.pinned;
    }
  }
};
BlockAttributes.prototype = {};
BlockAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.keyEvent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.summary = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.pinned = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BlockAttributes.prototype.write = function(output) {
  output.writeStructBegin('BlockAttributes');
  if (this.keyEvent !== null && this.keyEvent !== undefined) {
    output.writeFieldBegin('keyEvent', Thrift.Type.BOOL, 1);
    output.writeBool(this.keyEvent);
    output.writeFieldEnd();
  }
  if (this.summary !== null && this.summary !== undefined) {
    output.writeFieldBegin('summary', Thrift.Type.BOOL, 2);
    output.writeBool(this.summary);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 3);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.pinned !== null && this.pinned !== undefined) {
    output.writeFieldBegin('pinned', Thrift.Type.BOOL, 4);
    output.writeBool(this.pinned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Block = module.exports.Block = function(args) {
  this.id = null;
  this.attributes = null;
  this.createdBy = null;
  this.dateCreated = null;
  this.elements = null;
  this.firstPublishedDate = null;
  this.lastModified = null;
  this.lastModifiedBy = null;
  this.published = null;
  this.publishedDate = null;
  this.bodyTextSummary = null;
  this.bodyHtml = null;
  this.contributors = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = new ttypes.BlockAttributes(args.attributes);
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = new ttypes.User(args.createdBy);
    }
    if (args.dateCreated !== undefined && args.dateCreated !== null) {
      this.dateCreated = args.dateCreated;
    }
    if (args.elements !== undefined && args.elements !== null) {
      this.elements = Thrift.copyList(args.elements, [ttypes.Element]);
    }
    if (args.firstPublishedDate !== undefined && args.firstPublishedDate !== null) {
      this.firstPublishedDate = args.firstPublishedDate;
    }
    if (args.lastModified !== undefined && args.lastModified !== null) {
      this.lastModified = args.lastModified;
    }
    if (args.lastModifiedBy !== undefined && args.lastModifiedBy !== null) {
      this.lastModifiedBy = new ttypes.User(args.lastModifiedBy);
    }
    if (args.published !== undefined && args.published !== null) {
      this.published = args.published;
    }
    if (args.publishedDate !== undefined && args.publishedDate !== null) {
      this.publishedDate = args.publishedDate;
    }
    if (args.bodyTextSummary !== undefined && args.bodyTextSummary !== null) {
      this.bodyTextSummary = args.bodyTextSummary;
    }
    if (args.bodyHtml !== undefined && args.bodyHtml !== null) {
      this.bodyHtml = args.bodyHtml;
    }
    if (args.contributors !== undefined && args.contributors !== null) {
      this.contributors = Thrift.copyList(args.contributors, [ttypes.Tag]);
    }
  }
};
Block.prototype = {};
Block.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new ttypes.BlockAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.createdBy = new ttypes.User();
        this.createdBy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.dateCreated = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.elements = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Element();
          elem14.read(input);
          this.elements.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.firstPublishedDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.lastModified = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.lastModifiedBy = new ttypes.User();
        this.lastModifiedBy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.publishedDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.bodyTextSummary = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.bodyHtml = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.contributors = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.Tag();
          elem21.read(input);
          this.contributors.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Block.prototype.write = function(output) {
  output.writeStructBegin('Block');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 2);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRUCT, 3);
    this.createdBy.write(output);
    output.writeFieldEnd();
  }
  if (this.dateCreated !== null && this.dateCreated !== undefined) {
    output.writeFieldBegin('dateCreated', Thrift.Type.I64, 4);
    output.writeI64(this.dateCreated);
    output.writeFieldEnd();
  }
  if (this.elements !== null && this.elements !== undefined) {
    output.writeFieldBegin('elements', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.elements.length);
    for (var iter22 in this.elements)
    {
      if (this.elements.hasOwnProperty(iter22))
      {
        iter22 = this.elements[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.firstPublishedDate !== null && this.firstPublishedDate !== undefined) {
    output.writeFieldBegin('firstPublishedDate', Thrift.Type.I64, 6);
    output.writeI64(this.firstPublishedDate);
    output.writeFieldEnd();
  }
  if (this.lastModified !== null && this.lastModified !== undefined) {
    output.writeFieldBegin('lastModified', Thrift.Type.I64, 7);
    output.writeI64(this.lastModified);
    output.writeFieldEnd();
  }
  if (this.lastModifiedBy !== null && this.lastModifiedBy !== undefined) {
    output.writeFieldBegin('lastModifiedBy', Thrift.Type.STRUCT, 8);
    this.lastModifiedBy.write(output);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 9);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.publishedDate !== null && this.publishedDate !== undefined) {
    output.writeFieldBegin('publishedDate', Thrift.Type.I64, 10);
    output.writeI64(this.publishedDate);
    output.writeFieldEnd();
  }
  if (this.bodyTextSummary !== null && this.bodyTextSummary !== undefined) {
    output.writeFieldBegin('bodyTextSummary', Thrift.Type.STRING, 11);
    output.writeString(this.bodyTextSummary);
    output.writeFieldEnd();
  }
  if (this.bodyHtml !== null && this.bodyHtml !== undefined) {
    output.writeFieldBegin('bodyHtml', Thrift.Type.STRING, 12);
    output.writeString(this.bodyHtml);
    output.writeFieldEnd();
  }
  if (this.contributors !== null && this.contributors !== undefined) {
    output.writeFieldBegin('contributors', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.contributors.length);
    for (var iter23 in this.contributors)
    {
      if (this.contributors.hasOwnProperty(iter23))
      {
        iter23 = this.contributors[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ImageFields = module.exports.ImageFields = function(args) {
  this.alt = null;
  this.caption = null;
  this.comment = null;
  this.copyright = null;
  this.displayCredit = null;
  this.imageType = null;
  this.mediaApiUri = null;
  this.mediaId = null;
  this.photographer = null;
  this.picdarUrn = null;
  this.role = null;
  this.source = null;
  this.suppliersReference = null;
  this.credit = null;
  if (args) {
    if (args.alt !== undefined && args.alt !== null) {
      this.alt = args.alt;
    }
    if (args.caption !== undefined && args.caption !== null) {
      this.caption = args.caption;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.copyright !== undefined && args.copyright !== null) {
      this.copyright = args.copyright;
    }
    if (args.displayCredit !== undefined && args.displayCredit !== null) {
      this.displayCredit = args.displayCredit;
    }
    if (args.imageType !== undefined && args.imageType !== null) {
      this.imageType = args.imageType;
    }
    if (args.mediaApiUri !== undefined && args.mediaApiUri !== null) {
      this.mediaApiUri = args.mediaApiUri;
    }
    if (args.mediaId !== undefined && args.mediaId !== null) {
      this.mediaId = args.mediaId;
    }
    if (args.photographer !== undefined && args.photographer !== null) {
      this.photographer = args.photographer;
    }
    if (args.picdarUrn !== undefined && args.picdarUrn !== null) {
      this.picdarUrn = args.picdarUrn;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.suppliersReference !== undefined && args.suppliersReference !== null) {
      this.suppliersReference = args.suppliersReference;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
  }
};
ImageFields.prototype = {};
ImageFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.caption = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.copyright = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.displayCredit = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.imageType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mediaApiUri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.mediaId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.photographer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.picdarUrn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.suppliersReference = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ImageFields.prototype.write = function(output) {
  output.writeStructBegin('ImageFields');
  if (this.alt !== null && this.alt !== undefined) {
    output.writeFieldBegin('alt', Thrift.Type.STRING, 1);
    output.writeString(this.alt);
    output.writeFieldEnd();
  }
  if (this.caption !== null && this.caption !== undefined) {
    output.writeFieldBegin('caption', Thrift.Type.STRING, 2);
    output.writeString(this.caption);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.copyright !== null && this.copyright !== undefined) {
    output.writeFieldBegin('copyright', Thrift.Type.STRING, 4);
    output.writeString(this.copyright);
    output.writeFieldEnd();
  }
  if (this.displayCredit !== null && this.displayCredit !== undefined) {
    output.writeFieldBegin('displayCredit', Thrift.Type.BOOL, 5);
    output.writeBool(this.displayCredit);
    output.writeFieldEnd();
  }
  if (this.imageType !== null && this.imageType !== undefined) {
    output.writeFieldBegin('imageType', Thrift.Type.STRING, 6);
    output.writeString(this.imageType);
    output.writeFieldEnd();
  }
  if (this.mediaApiUri !== null && this.mediaApiUri !== undefined) {
    output.writeFieldBegin('mediaApiUri', Thrift.Type.STRING, 7);
    output.writeString(this.mediaApiUri);
    output.writeFieldEnd();
  }
  if (this.mediaId !== null && this.mediaId !== undefined) {
    output.writeFieldBegin('mediaId', Thrift.Type.STRING, 8);
    output.writeString(this.mediaId);
    output.writeFieldEnd();
  }
  if (this.photographer !== null && this.photographer !== undefined) {
    output.writeFieldBegin('photographer', Thrift.Type.STRING, 9);
    output.writeString(this.photographer);
    output.writeFieldEnd();
  }
  if (this.picdarUrn !== null && this.picdarUrn !== undefined) {
    output.writeFieldBegin('picdarUrn', Thrift.Type.STRING, 10);
    output.writeString(this.picdarUrn);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 11);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 12);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.suppliersReference !== null && this.suppliersReference !== undefined) {
    output.writeFieldBegin('suppliersReference', Thrift.Type.STRING, 13);
    output.writeString(this.suppliersReference);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 14);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Image = module.exports.Image = function(args) {
  this.fields = null;
  this.assets = null;
  if (args) {
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = new ttypes.ImageFields(args.fields);
    }
    if (args.assets !== undefined && args.assets !== null) {
      this.assets = Thrift.copyList(args.assets, [ttypes.Asset]);
    }
  }
};
Image.prototype = {};
Image.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new ttypes.ImageFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.assets = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Asset();
          elem30.read(input);
          this.assets.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Image.prototype.write = function(output) {
  output.writeStructBegin('Image');
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 1);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.assets !== null && this.assets !== undefined) {
    output.writeFieldBegin('assets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.assets.length);
    for (var iter31 in this.assets)
    {
      if (this.assets.hasOwnProperty(iter31))
      {
        iter31 = this.assets[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentFields = module.exports.ContentFields = function(args) {
  this.headline = null;
  this.slug = null;
  this.linkText = null;
  this.standfirst = null;
  this.trailText = null;
  this.byline = null;
  this.main = null;
  this.body = null;
  this.newspaperPageNumber = null;
  this.newspaperPublicationDate = null;
  this.starRating = null;
  this.contributorBio = null;
  this.membershipAccess = null;
  this.wordCount = null;
  if (args) {
    if (args.headline !== undefined && args.headline !== null) {
      this.headline = args.headline;
    }
    if (args.slug !== undefined && args.slug !== null) {
      this.slug = args.slug;
    }
    if (args.linkText !== undefined && args.linkText !== null) {
      this.linkText = args.linkText;
    }
    if (args.standfirst !== undefined && args.standfirst !== null) {
      this.standfirst = args.standfirst;
    }
    if (args.trailText !== undefined && args.trailText !== null) {
      this.trailText = args.trailText;
    }
    if (args.byline !== undefined && args.byline !== null) {
      this.byline = args.byline;
    }
    if (args.main !== undefined && args.main !== null) {
      this.main = args.main;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
    if (args.newspaperPageNumber !== undefined && args.newspaperPageNumber !== null) {
      this.newspaperPageNumber = args.newspaperPageNumber;
    }
    if (args.newspaperPublicationDate !== undefined && args.newspaperPublicationDate !== null) {
      this.newspaperPublicationDate = args.newspaperPublicationDate;
    }
    if (args.starRating !== undefined && args.starRating !== null) {
      this.starRating = args.starRating;
    }
    if (args.contributorBio !== undefined && args.contributorBio !== null) {
      this.contributorBio = args.contributorBio;
    }
    if (args.membershipAccess !== undefined && args.membershipAccess !== null) {
      this.membershipAccess = args.membershipAccess;
    }
    if (args.wordCount !== undefined && args.wordCount !== null) {
      this.wordCount = args.wordCount;
    }
  }
};
ContentFields.prototype = {};
ContentFields.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.headline = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.linkText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.standfirst = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.trailText = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.byline = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.main = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.newspaperPageNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.newspaperPublicationDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I16) {
        this.starRating = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.contributorBio = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.membershipAccess = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.wordCount = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentFields.prototype.write = function(output) {
  output.writeStructBegin('ContentFields');
  if (this.headline !== null && this.headline !== undefined) {
    output.writeFieldBegin('headline', Thrift.Type.STRING, 1);
    output.writeString(this.headline);
    output.writeFieldEnd();
  }
  if (this.slug !== null && this.slug !== undefined) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 2);
    output.writeString(this.slug);
    output.writeFieldEnd();
  }
  if (this.linkText !== null && this.linkText !== undefined) {
    output.writeFieldBegin('linkText', Thrift.Type.STRING, 3);
    output.writeString(this.linkText);
    output.writeFieldEnd();
  }
  if (this.standfirst !== null && this.standfirst !== undefined) {
    output.writeFieldBegin('standfirst', Thrift.Type.STRING, 4);
    output.writeString(this.standfirst);
    output.writeFieldEnd();
  }
  if (this.trailText !== null && this.trailText !== undefined) {
    output.writeFieldBegin('trailText', Thrift.Type.STRING, 5);
    output.writeString(this.trailText);
    output.writeFieldEnd();
  }
  if (this.byline !== null && this.byline !== undefined) {
    output.writeFieldBegin('byline', Thrift.Type.STRING, 6);
    output.writeString(this.byline);
    output.writeFieldEnd();
  }
  if (this.main !== null && this.main !== undefined) {
    output.writeFieldBegin('main', Thrift.Type.STRING, 7);
    output.writeString(this.main);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 8);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  if (this.newspaperPageNumber !== null && this.newspaperPageNumber !== undefined) {
    output.writeFieldBegin('newspaperPageNumber', Thrift.Type.I32, 9);
    output.writeI32(this.newspaperPageNumber);
    output.writeFieldEnd();
  }
  if (this.newspaperPublicationDate !== null && this.newspaperPublicationDate !== undefined) {
    output.writeFieldBegin('newspaperPublicationDate', Thrift.Type.I64, 10);
    output.writeI64(this.newspaperPublicationDate);
    output.writeFieldEnd();
  }
  if (this.starRating !== null && this.starRating !== undefined) {
    output.writeFieldBegin('starRating', Thrift.Type.I16, 11);
    output.writeI16(this.starRating);
    output.writeFieldEnd();
  }
  if (this.contributorBio !== null && this.contributorBio !== undefined) {
    output.writeFieldBegin('contributorBio', Thrift.Type.STRING, 12);
    output.writeString(this.contributorBio);
    output.writeFieldEnd();
  }
  if (this.membershipAccess !== null && this.membershipAccess !== undefined) {
    output.writeFieldBegin('membershipAccess', Thrift.Type.I32, 13);
    output.writeI32(this.membershipAccess);
    output.writeFieldEnd();
  }
  if (this.wordCount !== null && this.wordCount !== undefined) {
    output.writeFieldBegin('wordCount', Thrift.Type.I32, 14);
    output.writeI32(this.wordCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContentSettings = module.exports.ContentSettings = function(args) {
  this.commentable = null;
  this.commentCloseDate = null;
  this.isPremoderated = null;
  this.productionOffice = null;
  this.displayHint = null;
  this.embargoedUntil = null;
  this.embargoedIndefinitely = null;
  this.isInappropriateForSponsorship = null;
  this.relatedContentOff = null;
  this.blockAds = null;
  this.allowUgc = null;
  this.witnessAssignmentId = null;
  this.liveBloggingNow = null;
  this.relativeTime = null;
  this.timeZone = null;
  this.legallySensitive = null;
  this.sensitive = null;
  if (args) {
    if (args.commentable !== undefined && args.commentable !== null) {
      this.commentable = args.commentable;
    }
    if (args.commentCloseDate !== undefined && args.commentCloseDate !== null) {
      this.commentCloseDate = args.commentCloseDate;
    }
    if (args.isPremoderated !== undefined && args.isPremoderated !== null) {
      this.isPremoderated = args.isPremoderated;
    }
    if (args.productionOffice !== undefined && args.productionOffice !== null) {
      this.productionOffice = args.productionOffice;
    }
    if (args.displayHint !== undefined && args.displayHint !== null) {
      this.displayHint = args.displayHint;
    }
    if (args.embargoedUntil !== undefined && args.embargoedUntil !== null) {
      this.embargoedUntil = args.embargoedUntil;
    }
    if (args.embargoedIndefinitely !== undefined && args.embargoedIndefinitely !== null) {
      this.embargoedIndefinitely = args.embargoedIndefinitely;
    }
    if (args.isInappropriateForSponsorship !== undefined && args.isInappropriateForSponsorship !== null) {
      this.isInappropriateForSponsorship = args.isInappropriateForSponsorship;
    }
    if (args.relatedContentOff !== undefined && args.relatedContentOff !== null) {
      this.relatedContentOff = args.relatedContentOff;
    }
    if (args.blockAds !== undefined && args.blockAds !== null) {
      this.blockAds = args.blockAds;
    }
    if (args.allowUgc !== undefined && args.allowUgc !== null) {
      this.allowUgc = args.allowUgc;
    }
    if (args.witnessAssignmentId !== undefined && args.witnessAssignmentId !== null) {
      this.witnessAssignmentId = args.witnessAssignmentId;
    }
    if (args.liveBloggingNow !== undefined && args.liveBloggingNow !== null) {
      this.liveBloggingNow = args.liveBloggingNow;
    }
    if (args.relativeTime !== undefined && args.relativeTime !== null) {
      this.relativeTime = args.relativeTime;
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    }
    if (args.legallySensitive !== undefined && args.legallySensitive !== null) {
      this.legallySensitive = args.legallySensitive;
    }
    if (args.sensitive !== undefined && args.sensitive !== null) {
      this.sensitive = args.sensitive;
    }
  }
};
ContentSettings.prototype = {};
ContentSettings.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.commentable = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.commentCloseDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isPremoderated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.productionOffice = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.displayHint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.embargoedUntil = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.embargoedIndefinitely = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isInappropriateForSponsorship = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.relatedContentOff = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.blockAds = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.allowUgc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.witnessAssignmentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.liveBloggingNow = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.relativeTime = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.legallySensitive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.sensitive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContentSettings.prototype.write = function(output) {
  output.writeStructBegin('ContentSettings');
  if (this.commentable !== null && this.commentable !== undefined) {
    output.writeFieldBegin('commentable', Thrift.Type.BOOL, 1);
    output.writeBool(this.commentable);
    output.writeFieldEnd();
  }
  if (this.commentCloseDate !== null && this.commentCloseDate !== undefined) {
    output.writeFieldBegin('commentCloseDate', Thrift.Type.I64, 2);
    output.writeI64(this.commentCloseDate);
    output.writeFieldEnd();
  }
  if (this.isPremoderated !== null && this.isPremoderated !== undefined) {
    output.writeFieldBegin('isPremoderated', Thrift.Type.BOOL, 3);
    output.writeBool(this.isPremoderated);
    output.writeFieldEnd();
  }
  if (this.productionOffice !== null && this.productionOffice !== undefined) {
    output.writeFieldBegin('productionOffice', Thrift.Type.I32, 4);
    output.writeI32(this.productionOffice);
    output.writeFieldEnd();
  }
  if (this.displayHint !== null && this.displayHint !== undefined) {
    output.writeFieldBegin('displayHint', Thrift.Type.STRING, 5);
    output.writeString(this.displayHint);
    output.writeFieldEnd();
  }
  if (this.embargoedUntil !== null && this.embargoedUntil !== undefined) {
    output.writeFieldBegin('embargoedUntil', Thrift.Type.I64, 6);
    output.writeI64(this.embargoedUntil);
    output.writeFieldEnd();
  }
  if (this.embargoedIndefinitely !== null && this.embargoedIndefinitely !== undefined) {
    output.writeFieldBegin('embargoedIndefinitely', Thrift.Type.BOOL, 7);
    output.writeBool(this.embargoedIndefinitely);
    output.writeFieldEnd();
  }
  if (this.isInappropriateForSponsorship !== null && this.isInappropriateForSponsorship !== undefined) {
    output.writeFieldBegin('isInappropriateForSponsorship', Thrift.Type.BOOL, 8);
    output.writeBool(this.isInappropriateForSponsorship);
    output.writeFieldEnd();
  }
  if (this.relatedContentOff !== null && this.relatedContentOff !== undefined) {
    output.writeFieldBegin('relatedContentOff', Thrift.Type.BOOL, 9);
    output.writeBool(this.relatedContentOff);
    output.writeFieldEnd();
  }
  if (this.blockAds !== null && this.blockAds !== undefined) {
    output.writeFieldBegin('blockAds', Thrift.Type.BOOL, 10);
    output.writeBool(this.blockAds);
    output.writeFieldEnd();
  }
  if (this.allowUgc !== null && this.allowUgc !== undefined) {
    output.writeFieldBegin('allowUgc', Thrift.Type.BOOL, 11);
    output.writeBool(this.allowUgc);
    output.writeFieldEnd();
  }
  if (this.witnessAssignmentId !== null && this.witnessAssignmentId !== undefined) {
    output.writeFieldBegin('witnessAssignmentId', Thrift.Type.STRING, 12);
    output.writeString(this.witnessAssignmentId);
    output.writeFieldEnd();
  }
  if (this.liveBloggingNow !== null && this.liveBloggingNow !== undefined) {
    output.writeFieldBegin('liveBloggingNow', Thrift.Type.BOOL, 13);
    output.writeBool(this.liveBloggingNow);
    output.writeFieldEnd();
  }
  if (this.relativeTime !== null && this.relativeTime !== undefined) {
    output.writeFieldBegin('relativeTime', Thrift.Type.BOOL, 14);
    output.writeBool(this.relativeTime);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 15);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.legallySensitive !== null && this.legallySensitive !== undefined) {
    output.writeFieldBegin('legallySensitive', Thrift.Type.BOOL, 16);
    output.writeBool(this.legallySensitive);
    output.writeFieldEnd();
  }
  if (this.sensitive !== null && this.sensitive !== undefined) {
    output.writeFieldBegin('sensitive', Thrift.Type.BOOL, 17);
    output.writeBool(this.sensitive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Newspaper = module.exports.Newspaper = function(args) {
  this.book = null;
  this.bookSection = null;
  this.publication = null;
  if (args) {
    if (args.book !== undefined && args.book !== null) {
      this.book = new ttypes.Tag(args.book);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field book is unset!');
    }
    if (args.bookSection !== undefined && args.bookSection !== null) {
      this.bookSection = new ttypes.Tag(args.bookSection);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field bookSection is unset!');
    }
    if (args.publication !== undefined && args.publication !== null) {
      this.publication = new ttypes.Tag(args.publication);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field publication is unset!');
    }
  }
};
Newspaper.prototype = {};
Newspaper.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.book = new ttypes.Tag();
        this.book.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bookSection = new ttypes.Tag();
        this.bookSection.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.publication = new ttypes.Tag();
        this.publication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Newspaper.prototype.write = function(output) {
  output.writeStructBegin('Newspaper');
  if (this.book !== null && this.book !== undefined) {
    output.writeFieldBegin('book', Thrift.Type.STRUCT, 1);
    this.book.write(output);
    output.writeFieldEnd();
  }
  if (this.bookSection !== null && this.bookSection !== undefined) {
    output.writeFieldBegin('bookSection', Thrift.Type.STRUCT, 2);
    this.bookSection.write(output);
    output.writeFieldEnd();
  }
  if (this.publication !== null && this.publication !== undefined) {
    output.writeFieldBegin('publication', Thrift.Type.STRUCT, 3);
    this.publication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Reference = module.exports.Reference = function(args) {
  this.id = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
Reference.prototype = {};
Reference.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Reference.prototype.write = function(output) {
  output.writeStructBegin('Reference');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Taxonomy = module.exports.Taxonomy = function(args) {
  this.tags = null;
  this.contributors = null;
  this.publication = null;
  this.newspaper = null;
  this.references = null;
  if (args) {
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [ttypes.TagUsage]);
    }
    if (args.contributors !== undefined && args.contributors !== null) {
      this.contributors = Thrift.copyList(args.contributors, [ttypes.Tag]);
    }
    if (args.publication !== undefined && args.publication !== null) {
      this.publication = new ttypes.Tag(args.publication);
    }
    if (args.newspaper !== undefined && args.newspaper !== null) {
      this.newspaper = new ttypes.Newspaper(args.newspaper);
    }
    if (args.references !== undefined && args.references !== null) {
      this.references = Thrift.copyList(args.references, [ttypes.Reference]);
    }
  }
};
Taxonomy.prototype = {};
Taxonomy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.tags = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.TagUsage();
          elem38.read(input);
          this.tags.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.contributors = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new ttypes.Tag();
          elem45.read(input);
          this.contributors.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.publication = new ttypes.Tag();
        this.publication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.newspaper = new ttypes.Newspaper();
        this.newspaper.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.references = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new ttypes.Reference();
          elem52.read(input);
          this.references.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Taxonomy.prototype.write = function(output) {
  output.writeStructBegin('Taxonomy');
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tags.length);
    for (var iter53 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter53))
      {
        iter53 = this.tags[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.contributors !== null && this.contributors !== undefined) {
    output.writeFieldBegin('contributors', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.contributors.length);
    for (var iter54 in this.contributors)
    {
      if (this.contributors.hasOwnProperty(iter54))
      {
        iter54 = this.contributors[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.publication !== null && this.publication !== undefined) {
    output.writeFieldBegin('publication', Thrift.Type.STRUCT, 3);
    this.publication.write(output);
    output.writeFieldEnd();
  }
  if (this.newspaper !== null && this.newspaper !== undefined) {
    output.writeFieldBegin('newspaper', Thrift.Type.STRUCT, 4);
    this.newspaper.write(output);
    output.writeFieldEnd();
  }
  if (this.references !== null && this.references !== undefined) {
    output.writeFieldBegin('references', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.references.length);
    for (var iter55 in this.references)
    {
      if (this.references.hasOwnProperty(iter55))
      {
        iter55 = this.references[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExpiryDetails = module.exports.ExpiryDetails = function(args) {
  this.expired = null;
  this.expiredAt = null;
  this.scheduledExpiry = null;
  if (args) {
    if (args.expired !== undefined && args.expired !== null) {
      this.expired = args.expired;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field expired is unset!');
    }
    if (args.expiredAt !== undefined && args.expiredAt !== null) {
      this.expiredAt = args.expiredAt;
    }
    if (args.scheduledExpiry !== undefined && args.scheduledExpiry !== null) {
      this.scheduledExpiry = args.scheduledExpiry;
    }
  }
};
ExpiryDetails.prototype = {};
ExpiryDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.expired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.expiredAt = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scheduledExpiry = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExpiryDetails.prototype.write = function(output) {
  output.writeStructBegin('ExpiryDetails');
  if (this.expired !== null && this.expired !== undefined) {
    output.writeFieldBegin('expired', Thrift.Type.BOOL, 1);
    output.writeBool(this.expired);
    output.writeFieldEnd();
  }
  if (this.expiredAt !== null && this.expiredAt !== undefined) {
    output.writeFieldBegin('expiredAt', Thrift.Type.I64, 2);
    output.writeI64(this.expiredAt);
    output.writeFieldEnd();
  }
  if (this.scheduledExpiry !== null && this.scheduledExpiry !== undefined) {
    output.writeFieldBegin('scheduledExpiry', Thrift.Type.I64, 3);
    output.writeI64(this.scheduledExpiry);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Expiry = module.exports.Expiry = function(args) {
  this.rights = null;
  this.commercial = null;
  if (args) {
    if (args.rights !== undefined && args.rights !== null) {
      this.rights = new ttypes.ExpiryDetails(args.rights);
    }
    if (args.commercial !== undefined && args.commercial !== null) {
      this.commercial = new ttypes.ExpiryDetails(args.commercial);
    }
  }
};
Expiry.prototype = {};
Expiry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rights = new ttypes.ExpiryDetails();
        this.rights.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.commercial = new ttypes.ExpiryDetails();
        this.commercial.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Expiry.prototype.write = function(output) {
  output.writeStructBegin('Expiry');
  if (this.rights !== null && this.rights !== undefined) {
    output.writeFieldBegin('rights', Thrift.Type.STRUCT, 1);
    this.rights.write(output);
    output.writeFieldEnd();
  }
  if (this.commercial !== null && this.commercial !== undefined) {
    output.writeFieldBegin('commercial', Thrift.Type.STRUCT, 2);
    this.commercial.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Rights = module.exports.Rights = function(args) {
  this.syndicationAggregate = null;
  this.subscriptionDatabases = null;
  this.developerCommunity = null;
  if (args) {
    if (args.syndicationAggregate !== undefined && args.syndicationAggregate !== null) {
      this.syndicationAggregate = args.syndicationAggregate;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field syndicationAggregate is unset!');
    }
    if (args.subscriptionDatabases !== undefined && args.subscriptionDatabases !== null) {
      this.subscriptionDatabases = args.subscriptionDatabases;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field subscriptionDatabases is unset!');
    }
    if (args.developerCommunity !== undefined && args.developerCommunity !== null) {
      this.developerCommunity = args.developerCommunity;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field developerCommunity is unset!');
    }
  }
};
Rights.prototype = {};
Rights.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.syndicationAggregate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.subscriptionDatabases = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.developerCommunity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Rights.prototype.write = function(output) {
  output.writeStructBegin('Rights');
  if (this.syndicationAggregate !== null && this.syndicationAggregate !== undefined) {
    output.writeFieldBegin('syndicationAggregate', Thrift.Type.BOOL, 1);
    output.writeBool(this.syndicationAggregate);
    output.writeFieldEnd();
  }
  if (this.subscriptionDatabases !== null && this.subscriptionDatabases !== undefined) {
    output.writeFieldBegin('subscriptionDatabases', Thrift.Type.BOOL, 2);
    output.writeBool(this.subscriptionDatabases);
    output.writeFieldEnd();
  }
  if (this.developerCommunity !== null && this.developerCommunity !== undefined) {
    output.writeFieldBegin('developerCommunity', Thrift.Type.BOOL, 3);
    output.writeBool(this.developerCommunity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AtomID = module.exports.AtomID = function(args) {
  this.id = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
  }
};
AtomID.prototype = {};
AtomID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AtomID.prototype.write = function(output) {
  output.writeStructBegin('AtomID');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Content = module.exports.Content = function(args) {
  this.id = null;
  this.identifiers = null;
  this.type = null;
  this.published = null;
  this.isGone = null;
  this.isExpired = null;
  this.scheduledLaunchDate = null;
  this.contentChangeDetails = null;
  this.mainBlock = null;
  this.blocks = null;
  this.collaborators = null;
  this.thumbnail = null;
  this.fields = null;
  this.settings = null;
  this.taxonomy = null;
  this.secureThumbnail = null;
  this.expiry = null;
  this.rights = null;
  this.thumbnailImage = null;
  this.atomIds = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.identifiers !== undefined && args.identifiers !== null) {
      this.identifiers = new ttypes.Identifiers(args.identifiers);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field identifiers is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.published !== undefined && args.published !== null) {
      this.published = args.published;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field published is unset!');
    }
    if (args.isGone !== undefined && args.isGone !== null) {
      this.isGone = args.isGone;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isGone is unset!');
    }
    if (args.isExpired !== undefined && args.isExpired !== null) {
      this.isExpired = args.isExpired;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isExpired is unset!');
    }
    if (args.scheduledLaunchDate !== undefined && args.scheduledLaunchDate !== null) {
      this.scheduledLaunchDate = args.scheduledLaunchDate;
    }
    if (args.contentChangeDetails !== undefined && args.contentChangeDetails !== null) {
      this.contentChangeDetails = new ttypes.ContentChangeDetails(args.contentChangeDetails);
    }
    if (args.mainBlock !== undefined && args.mainBlock !== null) {
      this.mainBlock = new ttypes.Block(args.mainBlock);
    }
    if (args.blocks !== undefined && args.blocks !== null) {
      this.blocks = Thrift.copyList(args.blocks, [ttypes.Block]);
    }
    if (args.collaborators !== undefined && args.collaborators !== null) {
      this.collaborators = Thrift.copyList(args.collaborators, [ttypes.User]);
    }
    if (args.thumbnail !== undefined && args.thumbnail !== null) {
      this.thumbnail = args.thumbnail;
    }
    if (args.fields !== undefined && args.fields !== null) {
      this.fields = new ttypes.ContentFields(args.fields);
    }
    if (args.settings !== undefined && args.settings !== null) {
      this.settings = new ttypes.ContentSettings(args.settings);
    }
    if (args.taxonomy !== undefined && args.taxonomy !== null) {
      this.taxonomy = new ttypes.Taxonomy(args.taxonomy);
    }
    if (args.secureThumbnail !== undefined && args.secureThumbnail !== null) {
      this.secureThumbnail = args.secureThumbnail;
    }
    if (args.expiry !== undefined && args.expiry !== null) {
      this.expiry = new ttypes.Expiry(args.expiry);
    }
    if (args.rights !== undefined && args.rights !== null) {
      this.rights = new ttypes.Rights(args.rights);
    }
    if (args.thumbnailImage !== undefined && args.thumbnailImage !== null) {
      this.thumbnailImage = new ttypes.Image(args.thumbnailImage);
    }
    if (args.atomIds !== undefined && args.atomIds !== null) {
      this.atomIds = Thrift.copyList(args.atomIds, [ttypes.AtomID]);
    }
  }
};
Content.prototype = {};
Content.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.identifiers = new ttypes.Identifiers();
        this.identifiers.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isGone = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isExpired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.scheduledLaunchDate = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.contentChangeDetails = new ttypes.ContentChangeDetails();
        this.contentChangeDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.mainBlock = new ttypes.Block();
        this.mainBlock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.blocks = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Block();
          elem62.read(input);
          this.blocks.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.collaborators = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new ttypes.User();
          elem69.read(input);
          this.collaborators.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.fields = new ttypes.ContentFields();
        this.fields.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.settings = new ttypes.ContentSettings();
        this.settings.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.taxonomy = new ttypes.Taxonomy();
        this.taxonomy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.secureThumbnail = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.expiry = new ttypes.Expiry();
        this.expiry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.rights = new ttypes.Rights();
        this.rights.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.thumbnailImage = new ttypes.Image();
        this.thumbnailImage.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.atomIds = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.AtomID();
          elem76.read(input);
          this.atomIds.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Content.prototype.write = function(output) {
  output.writeStructBegin('Content');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.identifiers !== null && this.identifiers !== undefined) {
    output.writeFieldBegin('identifiers', Thrift.Type.STRUCT, 2);
    this.identifiers.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 4);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.isGone !== null && this.isGone !== undefined) {
    output.writeFieldBegin('isGone', Thrift.Type.BOOL, 5);
    output.writeBool(this.isGone);
    output.writeFieldEnd();
  }
  if (this.isExpired !== null && this.isExpired !== undefined) {
    output.writeFieldBegin('isExpired', Thrift.Type.BOOL, 6);
    output.writeBool(this.isExpired);
    output.writeFieldEnd();
  }
  if (this.scheduledLaunchDate !== null && this.scheduledLaunchDate !== undefined) {
    output.writeFieldBegin('scheduledLaunchDate', Thrift.Type.I64, 7);
    output.writeI64(this.scheduledLaunchDate);
    output.writeFieldEnd();
  }
  if (this.contentChangeDetails !== null && this.contentChangeDetails !== undefined) {
    output.writeFieldBegin('contentChangeDetails', Thrift.Type.STRUCT, 8);
    this.contentChangeDetails.write(output);
    output.writeFieldEnd();
  }
  if (this.mainBlock !== null && this.mainBlock !== undefined) {
    output.writeFieldBegin('mainBlock', Thrift.Type.STRUCT, 9);
    this.mainBlock.write(output);
    output.writeFieldEnd();
  }
  if (this.blocks !== null && this.blocks !== undefined) {
    output.writeFieldBegin('blocks', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.blocks.length);
    for (var iter77 in this.blocks)
    {
      if (this.blocks.hasOwnProperty(iter77))
      {
        iter77 = this.blocks[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.collaborators !== null && this.collaborators !== undefined) {
    output.writeFieldBegin('collaborators', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.collaborators.length);
    for (var iter78 in this.collaborators)
    {
      if (this.collaborators.hasOwnProperty(iter78))
      {
        iter78 = this.collaborators[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.thumbnail !== null && this.thumbnail !== undefined) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 12);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  if (this.fields !== null && this.fields !== undefined) {
    output.writeFieldBegin('fields', Thrift.Type.STRUCT, 13);
    this.fields.write(output);
    output.writeFieldEnd();
  }
  if (this.settings !== null && this.settings !== undefined) {
    output.writeFieldBegin('settings', Thrift.Type.STRUCT, 14);
    this.settings.write(output);
    output.writeFieldEnd();
  }
  if (this.taxonomy !== null && this.taxonomy !== undefined) {
    output.writeFieldBegin('taxonomy', Thrift.Type.STRUCT, 15);
    this.taxonomy.write(output);
    output.writeFieldEnd();
  }
  if (this.secureThumbnail !== null && this.secureThumbnail !== undefined) {
    output.writeFieldBegin('secureThumbnail', Thrift.Type.STRING, 16);
    output.writeString(this.secureThumbnail);
    output.writeFieldEnd();
  }
  if (this.expiry !== null && this.expiry !== undefined) {
    output.writeFieldBegin('expiry', Thrift.Type.STRUCT, 17);
    this.expiry.write(output);
    output.writeFieldEnd();
  }
  if (this.rights !== null && this.rights !== undefined) {
    output.writeFieldBegin('rights', Thrift.Type.STRUCT, 18);
    this.rights.write(output);
    output.writeFieldEnd();
  }
  if (this.thumbnailImage !== null && this.thumbnailImage !== undefined) {
    output.writeFieldBegin('thumbnailImage', Thrift.Type.STRUCT, 19);
    this.thumbnailImage.write(output);
    output.writeFieldEnd();
  }
  if (this.atomIds !== null && this.atomIds !== undefined) {
    output.writeFieldBegin('atomIds', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.atomIds.length);
    for (var iter79 in this.atomIds)
    {
      if (this.atomIds.hasOwnProperty(iter79))
      {
        iter79 = this.atomIds[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

