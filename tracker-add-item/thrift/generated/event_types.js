//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var content_ttypes = require('./content_types')


var ttypes = module.exports = {};
ttypes.EventType = {
  'Update' : 1,
  'Delete' : 2
};
Event = module.exports.Event = function(args) {
  this.eventType = null;
  this.eventCreationTime = null;
  this.contentId = null;
  this.pageId = null;
  this.content = null;
  if (args) {
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventType is unset!');
    }
    if (args.eventCreationTime !== undefined && args.eventCreationTime !== null) {
      this.eventCreationTime = args.eventCreationTime;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field eventCreationTime is unset!');
    }
    if (args.contentId !== undefined && args.contentId !== null) {
      this.contentId = args.contentId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field contentId is unset!');
    }
    if (args.pageId !== undefined && args.pageId !== null) {
      this.pageId = args.pageId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field pageId is unset!');
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = new content_ttypes.Content(args.content);
    }
  }
};
Event.prototype = {};
Event.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.eventCreationTime = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.pageId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new content_ttypes.Content();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Event.prototype.write = function(output) {
  output.writeStructBegin('Event');
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 1);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.eventCreationTime !== null && this.eventCreationTime !== undefined) {
    output.writeFieldBegin('eventCreationTime', Thrift.Type.I64, 2);
    output.writeI64(this.eventCreationTime);
    output.writeFieldEnd();
  }
  if (this.contentId !== null && this.contentId !== undefined) {
    output.writeFieldBegin('contentId', Thrift.Type.STRING, 3);
    output.writeString(this.contentId);
    output.writeFieldEnd();
  }
  if (this.pageId !== null && this.pageId !== undefined) {
    output.writeFieldBegin('pageId', Thrift.Type.I64, 4);
    output.writeI64(this.pageId);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 5);
    this.content.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

